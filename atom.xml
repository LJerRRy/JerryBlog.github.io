<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never Git up</title>
  <subtitle>Better late than never</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wenjiewang.top/"/>
  <updated>2016-12-14T11:14:47.815Z</updated>
  <id>http://wenjiewang.top/</id>
  
  <author>
    <name>Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python入门List</title>
    <link href="http://wenjiewang.top/2016/11/14/pythonjj/"/>
    <id>http://wenjiewang.top/2016/11/14/pythonjj/</id>
    <published>2016-11-14T05:52:05.000Z</published>
    <updated>2016-12-14T11:14:47.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol>
<li>问题</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sampleList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line"><span class="comment">#sampleList.insert(2,1)</span></div><div class="line"><span class="comment">#print(sampleList.count(1))</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> sampleList:</div><div class="line">    <span class="keyword">print</span> (a)</div><div class="line">    <span class="keyword">if</span> a == <span class="number">4</span>:</div><div class="line">        sampleList.reverse()</div><div class="line">        print(sampleList)</div></pre></td></tr></table></figure>
<p>上面代码输出结果如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line">[<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"><span class="number">4</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<p>可以发现for循环一个list表时，它本质上还是有个i变量，从0开始一直加到最开始的list表的长度(这个长度每次会重新获取一次），如下例子中，如果每次循环都向list中添加元素，那么应该一直遍历下去，但结果并不是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sampleList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line"><span class="comment">#sampleList.insert(2,1)</span></div><div class="line"><span class="comment">#print(sampleList.count(1))</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> sampleList:</div><div class="line">    <span class="keyword">print</span> (a)</div><div class="line">    <span class="keyword">if</span> a==<span class="number">1</span>:</div><div class="line">        sampleList.append(<span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,len(sampleList)):</div><div class="line">    <span class="keyword">print</span> (a)</div><div class="line">    <span class="keyword">if</span> a==<span class="number">1</span>:</div><div class="line">        sampleList.append(<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>python2.x 中,range返回的是一个列表<br>python3.x中,range返回的是一个迭代值<br>类似for n in range(1,10):之类的可以照常使用<br>如果要在3.x中产生1-10的列表,可以list(range(1,10))</p>
<ol>
<li>list的方法<br>.append(value) - appends element to end of the list<br>.count(‘x’) - counts the number of occurrences of ‘x’ in the list<br>.index(‘x’) - returns the index of ‘x’ in the list  若不含有x则报错<br>.insert(‘y’,’x’) - inserts ‘x’ at location ‘y’<br>.pop() - returns last element then removes it from the list<br>.remove(‘x’) - finds and removes first ‘x’ from list 无返回值<br>.reverse() - reverses the elements in the list<br>.sort() - sorts the list alphabetically in ascending order, or numerical in ascending order</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;问题&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://wenjiewang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python入门</title>
    <link href="http://wenjiewang.top/2016/11/05/pythonbases/"/>
    <id>http://wenjiewang.top/2016/11/05/pythonbases/</id>
    <published>2016-11-05T05:52:05.000Z</published>
    <updated>2016-11-09T16:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基本知识"><a href="#Python基本知识" class="headerlink" title="Python基本知识"></a>Python基本知识</h2><ol>
<li>区分大小写，用<code>#</code>来注释</li>
<li>用缩进（四个空格）来表示块</li>
<li>变量的类型可以变，即不需要删除原始变量，直接进行赋值另一种类型</li>
<li>print，type函数，print为输出到终端，type查看类型</li>
<li>常用数据类型有int,float,boolean(True/False),字符串</li>
<li><p>sequence序列是一组有序的元素集合，包括tuple（定值表，也叫元组，其中元素不能改变）和list（表，元素可以改变）<br>序列元素<strong>下标从0开始</strong><br>基本样式 <strong>[下限:上限:步长]</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s1 = (<span class="number">2</span>, <span class="number">1.3</span>, <span class="string">'love'</span>, <span class="number">5.6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="keyword">False</span>)         <span class="comment"># s1是一个tuple,用括号来赋值</span></div><div class="line">s2 = [<span class="keyword">True</span>, <span class="number">5</span>, <span class="string">'smile'</span>]                          <span class="comment"># s2是一个list，用中括号来赋值</span></div><div class="line">s3 = [<span class="number">1</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]                                 <span class="comment"># 一个序列作为另一个序列的元素</span></div><div class="line"><span class="keyword">print</span> s1[:<span class="number">5</span>]             <span class="comment"># 从开始到下标4 （下标5的元素 不包括在内）</span></div><div class="line"><span class="keyword">print</span> s1[<span class="number">2</span>:]             <span class="comment"># 从下标2到最后</span></div><div class="line"><span class="keyword">print</span> s1[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]          <span class="comment"># 从下标0到下标4 (下标5不包括在内)，每隔2取一个元素 （下标为0，2，4的元素）</span></div><div class="line"><span class="keyword">print</span> s1[<span class="number">2</span>:<span class="number">0</span>:<span class="number">-1</span>]         <span class="comment"># 从下标2到下标1</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串也是元组，所以也可以像序列一样进行相关操作</p>
</li>
<li>逻辑运算符 and,or,not（与或非）</li>
<li><code>if elif else</code> 选择语句，判断条件直接接在<code>if elif</code>后面，<strong>不需要括号，但其末尾必须有个冒号</strong></li>
<li><code>for while</code>循环， <code>for 元素 in 序列:</code>其中末尾有个冒号（while也是，判断条件不需要加括号），<code>range()</code>函数来帮助建表，<code>range(5) == [0,1,2,3,4]</code></li>
<li><code>break, continue</code></li>
<li><code>def</code>定义函数，可以用<code>return</code>返回函数值，可以返回多个</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_sum</span><span class="params">(a,b)</span>:</span></div><div class="line">    c = a**<span class="number">2</span> + b**<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> c</div><div class="line"><span class="comment">#可以return a,b,c多个返回值</span></div></pre></td></tr></table></figure>
<ol>
<li>函数调用时，如果参数是表的话，然后对表进行操作，会改变表的值（引用传递），如果是整数的话，不会改变（按值传递）。</li>
<li>类，用<code>class</code>定义类，都有一个原型（默认为object，但必须写）。属性和方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(object)</span>:</span></div><div class="line">    have_feather = <span class="keyword">True</span> <span class="comment">#属性</span></div><div class="line">    way_of_reproduction  = <span class="string">'egg'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, dx, dy)</span>:</span> <span class="comment">#方法，其中包括一个self（第一个参数必须是self），类似于java或者c++中的this</span></div><div class="line">        position = [<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">        <span class="comment">#self.have_feather = False #调用类属性</span></div><div class="line">        position[<span class="number">0</span>] = position[<span class="number">0</span>] + dx</div><div class="line">        position[<span class="number">1</span>] = position[<span class="number">1</span>] + dy</div><div class="line">        <span class="keyword">return</span> position</div><div class="line"><span class="comment">#类的继承</span></div><div class="line"><span class="comment">#子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span><span class="params">(Bird)</span>:</span></div><div class="line">    way_of_move = <span class="string">'walk'</span></div><div class="line">    possible_in_KFC = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oriole</span><span class="params">(Bird)</span>:</span></div><div class="line">    way_of_move = <span class="string">'fly'</span></div><div class="line">    possible_in_KFC = <span class="keyword">False</span></div><div class="line"></div><div class="line">summer = Chicken()<span class="comment">#创建一个对象</span></div><div class="line"><span class="keyword">print</span> summer.have_feather<span class="comment">#调用对象的属性</span></div><div class="line"><span class="keyword">print</span> summer.move(<span class="number">5</span>,<span class="number">8</span>)</div></pre></td></tr></table></figure>
<ol>
<li><p>类中有个<strong>特殊方法（special method）</strong>  <code>__init__()</code>方法 创建对象时自动调用这个方法，初始化对象的属性。</p>
</li>
<li><p>list是一个类，表的运算符，比如+, -, &gt;, &lt;, 以及下标引用[start:end]等等，从根本上都是定义在类内部的方法。</p>
</li>
</ol>
<h2 id="Python中词典-dictionary"><a href="#Python中词典-dictionary" class="headerlink" title="Python中词典(dictionary)"></a>Python中词典(dictionary)</h2><p>一个新的类，词典 (dictionary)。与列表相似，词典也可以储存多个元素。这种储存多个元素的对象称为容器(container)</p>
<ol>
<li>词典和表类似的地方，是包含有多个元素，每个元素以逗号分隔。但词典的元素包含有两部分，<strong>键</strong>和<strong>值</strong>，常见的是以字符串来表示键，也可以使用数字或者真值来表示键（不可变的对象可以作为键）。值可以是任意对象。键和值两者一一对应。</li>
<li>与表不同的是，词典的元素没有顺序。你不能通过下标引用元素。词典是通过键来引用。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dic = &#123;<span class="string">'tom'</span>:<span class="number">11</span>, <span class="string">'sam'</span>:<span class="number">57</span>,<span class="string">'lily'</span>:<span class="number">100</span>&#125; <span class="comment">#一个词典，词典可以为空</span></div><div class="line"><span class="keyword">print</span> type(dic)</div><div class="line">dic[<span class="string">'lilei'</span>] = <span class="number">99</span> <span class="comment">#添加元素</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic: <span class="comment">#遍历词典</span></div><div class="line">    <span class="keyword">print</span> dic[key]</div><div class="line"></div><div class="line"><span class="keyword">print</span> dic.keys()           <span class="comment"># 返回dic所有的键</span></div><div class="line"><span class="keyword">print</span> dic.values()         <span class="comment"># 返回dic所有的值</span></div><div class="line"><span class="keyword">print</span> dic.items()          <span class="comment"># 返回dic所有的元素（键值对）</span></div><div class="line">dic.clear()                <span class="comment"># 清空dic，dict变为&#123;&#125;</span></div><div class="line"><span class="keyword">del</span> dic[<span class="string">'tom'</span>]             <span class="comment"># 删除 dic 的‘tom’元素</span></div><div class="line"><span class="comment">#del是Python中保留的关键字，用于删除对象。</span></div><div class="line"><span class="keyword">print</span> len(dic)             <span class="comment"># 返回dic元素个数</span></div></pre></td></tr></table></figure>
<h2 id="Python进阶"><a href="#Python进阶" class="headerlink" title="Python进阶"></a>Python进阶</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>对象名 = open(文件名，模式)<br>最常用的模式有：</p>
<pre><code>r 打开只读文件，该文件必须存在。
r+ 打开可读写的文件，该文件必须存在。
w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
a 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。
a+ 以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。
上述的形态字符串都可以再加一个b字符，如rb、w+b或ab＋等组合，加入b 字符用来告诉函数库打开的文件为二进制文件，而非纯文字文件。
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">"test.txt"</span>,<span class="string">"r"</span>)</div><div class="line">content = f.read(N)          <span class="comment"># 读取N bytes的数据</span></div><div class="line">content = f.readline()       <span class="comment"># 读取一行</span></div><div class="line">content = f.readlines()      <span class="comment"># 读取所有行，储存在列表中，每个元素是一行。</span></div><div class="line">f.write(<span class="string">'I like apple!\n'</span>)      <span class="comment"># 将'I like apple'写入文件并换行</span></div><div class="line">f.close()   <span class="comment"># 不要忘记关闭文件</span></div></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>一个.py文件就构成<strong>一个模块</strong>。通过模块，你可以<strong>调用</strong>其它文件中的程序。</p>
<ol>
<li>引入模块，用<code>import + 文件名（不要加后缀名）</code><br>引入模块后，可以通过 模块.对象 的方式来调用引入模块中的某个对象。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#first.py文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">laugh</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'HaHaHaHa'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> first   <span class="comment">#将first文件引入</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    first.laugh()<span class="comment">#first为引入的模块，laugh()是我们所引入的对象。</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> a <span class="keyword">as</span> b             <span class="comment"># 引入模块a，并将模块a重命名为b</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> a <span class="keyword">import</span> function1   <span class="comment"># 从模块a中引入function1对象。调用a中对象时，我们不用再说明模块，即直接使用function1，而不是a.function1。</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> a <span class="keyword">import</span> *           <span class="comment"># 从模块a中引入所有对象。调用a中对象时，我们不用再说明模块，即直接使用对象，而不是a.对象。</span></div></pre></td></tr></table></figure>
<ol>
<li>Python会在以下路径中搜索它想要寻找的模块：<br>– 程序所在的文件夹<br>– 操作系统环境变量PYTHONPATH所包含的路径<br>– 标准库的安装路径</li>
</ol>
<p>如果自定义的模块，或者下载的模块，可以根据情况放在相应的路径，以便Python可以找到。</p>
<ol>
<li>模块包,可以将功能相似的模块放在同一个文件夹（比如说this_dir）中，构成一个模块包。通过<code>import this_dir.module</code><br>引入<code>this_dir</code>文件夹中的<code>module</code>模块。<br>该文件夹中必须包含一个<code>__init__.py</code> 的文件，提醒Python，该文件夹为一个模块包。<code>__init__.py</code> 可以是一个空文件。</li>
</ol>
<h3 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h3><p>一般为位置传递，但比较死板。</p>
<ol>
<li>关键字(keyword)传递是根据每个参数的名字传递参数。关键字并不用遵守位置的对应关系。</li>
<li>参数默认值，有的参数有默认值可以不需要传递</li>
<li>包裹传递：在定义函数时，我们有时候并不知道调用的时候会传递多少个参数。这时候，包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会非常有用。<br>Example 1:</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*name)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(name)</div><div class="line">    <span class="keyword">print</span> name</div><div class="line"></div><div class="line">func(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>)</div><div class="line">func(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#两次调用，尽管参数个数不同，都基于同一个func定义。</span></div><div class="line"><span class="comment">#在func的参数表中，所有的参数被name收集，根据位置合并成一个元组(tuple)，这就是包裹位置传递。</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**dict)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(dict)</div><div class="line">    <span class="keyword">print</span> dict</div><div class="line"></div><div class="line">func(a=<span class="number">1</span>,b=<span class="number">9</span>)</div><div class="line">func(m=<span class="number">2</span>,n=<span class="number">1</span>,c=<span class="number">11</span>)</div><div class="line"><span class="comment">#dict是一个字典，收集所有的关键字，传递给函数func。</span></div><div class="line"><span class="comment">#为了提醒Python，参数dict是包裹关键字传递所用的字典，在dict前加 * *。</span></div></pre></td></tr></table></figure>
<ol>
<li>解包裹（unpacking）<br>* 和 **，也可以在调用的时候使用，即解包裹(unpacking).所谓的解包裹，就是在传递tuple时，让tuple的每一个元素对应一个位置参数。<br>Example :</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line"></div><div class="line">args = (<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">func(*args)</div><div class="line"></div><div class="line">dict = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line">func(**dict)</div></pre></td></tr></table></figure>
<ol>
<li>在定义或者调用参数时，参数的几种传递方式可以混合。但在过程中要小心前后顺序。基本原则是：<strong>先位置，再关键字，再包裹位置，再包裹关键字</strong>，并且根据上面所说的原理细细分辨。</li>
</ol>
<h3 id="循环设计-循环对象-函数对象"><a href="#循环设计-循环对象-函数对象" class="headerlink" title="循环设计 循环对象 函数对象"></a>循环设计 循环对象 函数对象</h3><ol>
<li>循环设计<br>三个函数，<code>range(), enumerate(), zip()</code><br>–range() :<br>–enumerate() : 利用enumerate()函数，可以在每次循环中同时得到下标和元素，其返回的是一个包含两个元素的定值表(tuple)<br>–zip() : 如果你多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">S = <span class="string">'abcdefghijk'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(S),<span class="number">2</span>):</div><div class="line">    <span class="keyword">print</span> S[i]</div><div class="line"><span class="keyword">for</span> (index,char) <span class="keyword">in</span> enumerate(S):</div><div class="line">    <span class="keyword">print</span> index</div><div class="line">    <span class="keyword">print</span> char</div><div class="line">ta = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">tb = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>]</div><div class="line">tc = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div><div class="line"><span class="keyword">for</span> (a,b,c) <span class="keyword">in</span> zip(ta,tb,tc):</div><div class="line">    print(a,b,c)</div></pre></td></tr></table></figure>
<ol>
<li><strong>循环对象</strong>：循环对象是这样一个对象，它包含有一个<code>next()</code>方法 ( <code>__next__()</code> 方法，在python 3x中 )， 这个方法的目的是进行到下一个结果，而在结束一系列结果之后，举出StopIteration错误。<br>当一个循环结构（比如for）调用循环对象时，<strong>它就会每次循环的时候调用next()方法</strong>，直到StopIteration出现，for循环接收到，就知道循环已经结束，停止调用next()。<br><strong>用循环对象的好处在于</strong>：不用在循环还没有开始的时候，就生成好要使用的元素。所使用的元素可以在循环过程中逐次生成。这样，节省了空间，提高了效率，编程更灵活。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'test.txt'</span>):</div><div class="line">    <span class="keyword">print</span> line</div><div class="line"><span class="comment">#open()返回的实际上是一个循环对象，包含有next()方法。</span></div><div class="line"><span class="comment">#而该next()方法每次返回的就是新的一行的内容，到达文件结尾时举出StopIteration。这样，我们相当于手工进行了循环。</span></div></pre></td></tr></table></figure>
<p><strong>迭代器</strong>：从技术上来说，循环对象和for循环调用之间还有一个中间层，就是要将循环对象转换成迭代器(iterator)。这一转换是通过使用iter()函数实现的。但从逻辑层面上，常常可以忽略这一层，所以循环对象和迭代器常常相互指代对方。<br><strong>生成器</strong>(generator)的主要目的是构成一个用户自定义的循环对象。<br>生成器的编写方法和函数定义类似，只是在return的地方<strong>改为yield</strong>。生成器中可以有多个yield。当生成器遇到一个yield时，会暂停运行生成器，返回yield后面的值。当再次调用生成器的时候，会从刚才暂停的地方继续运行，直到下一个yield。生成器自身又构成一个循环器，每次循环使用一个yield返回的值。<br>Example 1：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">100</span></div><div class="line">    <span class="keyword">yield</span> a</div><div class="line">    a = a*<span class="number">8</span></div><div class="line">    <span class="keyword">yield</span> a</div><div class="line">    <span class="keyword">yield</span> <span class="number">1000</span></div><div class="line"><span class="comment">#该生成器共有三个yield， 如果用作循环器时，会进行三次循环。</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen():</div><div class="line">    <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line"><span class="comment">#它又可以写成生成器表达式(Generator Expression)：</span></div><div class="line">G = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</div></pre></td></tr></table></figure>
<p><strong>表推导</strong>是快速生成表的方法。它的语法简单，很有实用价值。<br>假设生成表 L ：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">L = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    L.append(x**<span class="number">2</span>)</div><div class="line"><span class="comment">#快捷的写法，也就是表推导的方式:</span></div><div class="line">L = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"></div><div class="line">xl = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line">yl = [<span class="number">9</span>,<span class="number">12</span>,<span class="number">13</span>]</div><div class="line">L  = [ x**<span class="number">2</span> <span class="keyword">for</span> (x,y) <span class="keyword">in</span> zip(xl,yl) <span class="keyword">if</span> y &gt; <span class="number">10</span>]</div></pre></td></tr></table></figure>
<ol>
<li>函数对象<br>一切皆对象，函数也是一个对象，具有属性（可以使用dir()查询）。作为对象，它还可以赋值给其它对象名，或者作为参数传递。即函数也可以作为参数进行传递。</li>
</ol>
<p><strong>lambda()函数</strong>：用来<strong>定义函数</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func = <span class="keyword">lambda</span> x,y: x + y</div><div class="line"><span class="keyword">print</span> func(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="comment">#lambda生成一个函数对象。该函数参数为x,y，返回值为x+y。</span></div><div class="line"><span class="comment">#函数对象赋给func。</span></div><div class="line"><span class="comment">#func的调用与正常函数无异。</span></div><div class="line"><span class="comment">#等价于下面这个函数定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure>
<p><strong>函数作为参数</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(f, a, b)</span>:</span></div><div class="line">    <span class="comment">#print 'test'</span></div><div class="line">    <span class="keyword">print</span> f(a, b)</div><div class="line"></div><div class="line">test(func, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="comment">#上面等价于下面一行</span></div><div class="line">test((<span class="keyword">lambda</span> x,y: x**<span class="number">2</span> + y), <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure>
<p><strong>map()函数</strong><br>map()是Python的内置函数。它的第一个参数是一个函数对象。map()的功能是将函数对象依次作用于表的每一个元素，每次作用的结果储存于返回的表re中。例如<code>re = map((lambda x: x+3),[1,3,5,6])</code>，map通过读入的函数(这里是lambda函数)来操作数据（这里“数据”是表中的每一个元素，“操作”是对每个数据加3）。<br>在Python 3.X中，map()的返回值是一个循环对象。可以利用list()函数，将该循环对象转换成表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果作为参数的函数对象有多个参数，可使用下面的方式，向map()传递函数参数的多个参数：</span></div><div class="line">re = map((<span class="keyword">lambda</span> x,y: x+y),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>])</div><div class="line"><span class="comment">#map()将每次从两个表中分别取出一个元素，带入lambda所定义的函数。</span></div></pre></td></tr></table></figure>
<p><strong>filter()函数</strong><br>filter函数的第一个参数也是一个函数对象。它也是将作为参数的函数对象作用于多个元素。<strong>如果函数对象返回的是True，则该次的元素被储存于返回的表中</strong>。 filter通过读入的函数来筛选数据。同样，在Python 3.X中，filter返回的不是表，而是循环对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></div><div class="line">    <span class="keyword">if</span> a &gt; <span class="number">100</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">print</span> filter(func,[<span class="number">10</span>,<span class="number">56</span>,<span class="number">101</span>,<span class="number">500</span>])</div></pre></td></tr></table></figure>
<p><strong>reduce函数</strong><br>reduce函数的第一个参数也是函数，但有一个要求，就是这个函数自身能接收两个参数。reduce可以累进地将函数作用于各个参数。如下例：</p>
<p><code>print reduce((lambda x,y: x+y),[1,2,5,7,9])</code><br>reduce的第一个参数是lambda函数，它接收两个参数x,y, 返回x+y。</p>
<p>reduce将表中的前两个元素(1和2)传递给lambda函数，得到3。该返回值(3)将作为lambda函数的第一个参数，而表中的下一个元素(5)作为lambda函数的第二个参数，进行下一次的对lambda函数的调用，得到8。依次调用lambda函数，每次lambda函数的第一个参数是上一次运算结果，而第二个参数为表中的下一个元素，直到表中没有剩余元素。</p>
<p>上面例子，相当于(((1+2)+5)+7)+9</p>
<p><em>提醒： reduce()函数在3.0里面不能直接用的，它被定义在了functools包里面，需要引入包。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python基本知识&quot;&gt;&lt;a href=&quot;#Python基本知识&quot; class=&quot;headerlink&quot; title=&quot;Python基本知识&quot;&gt;&lt;/a&gt;Python基本知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;区分大小写，用&lt;code&gt;#&lt;/code&gt;来注释&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://wenjiewang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Backpropagation and  cost function for neural network</title>
    <link href="http://wenjiewang.top/2016/10/31/ML-Backpropagation/"/>
    <id>http://wenjiewang.top/2016/10/31/ML-Backpropagation/</id>
    <published>2016-10-31T01:12:05.000Z</published>
    <updated>2016-11-21T14:18:59.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Backpropagation-反向传播算法"><a href="#Backpropagation-反向传播算法" class="headerlink" title="Backpropagation 反向传播算法"></a>Backpropagation 反向传播算法</h2><h2 id="Multivariate-Linear-Regression"><a href="#Multivariate-Linear-Regression" class="headerlink" title="Multivariate Linear Regression"></a>Multivariate Linear Regression</h2><h3 id="Mutiple-Features"><a href="#Mutiple-Features" class="headerlink" title="Mutiple Features"></a>Mutiple Features</h3><h3 id="Gradient-Descent-for-Multiple-Variables"><a href="#Gradient-Descent-for-Multiple-Variables" class="headerlink" title="Gradient Descent for Multiple Variables"></a>Gradient Descent for Multiple Variables</h3><h3 id="Gradient-Descent-in-Practice-Feature-Scaling"><a href="#Gradient-Descent-in-Practice-Feature-Scaling" class="headerlink" title="Gradient Descent in Practice (Feature Scaling)"></a>Gradient Descent in Practice (Feature Scaling)</h3><p>Make sure features are on a similar scale.</p>
<p>Get every Feature into approximately a -1 ≤ x<sub>i</sub> ≤ 1 range<br>将数据集（训练集）进行缩放，原因是直接使用原始的数据集进行梯度下降，迭代次数会非常多而且相当复杂。</p>
<p><strong>Mean normalization</strong> Replace x<sub>i</sub> with x<sub>i</sub> - u<sub>i</sub> (average value) / s<sub>i</sub> (range) to make features have approximately zero mean (Do not apply to x<sub>0</sub> = 1)</p>
<h3 id="Gradient-Descent-in-Practice-Learning-Rate"><a href="#Gradient-Descent-in-Practice-Learning-Rate" class="headerlink" title="Gradient Descent in Practice (Learning Rate)"></a>Gradient Descent in Practice (Learning Rate)</h3><ol>
<li>“Debugging”: How to make sure gradient descent is working correctly</li>
</ol>
<p>example automatic convergence test: Declare convergence if  J(θ) decrease by less than 10 <sup>-3</sup> in one iteration<br>Gradient descent not working : use smaller <code>α</code> </p>
<p><code>α</code> 很足够小，那么每次迭代后的梯度都会下降，但是收敛的速度很慢<br><code>α</code> 太大了，不能够每次迭代梯度都能下降，可能造成不收敛（may not converge or slow converge)</p>
<ol>
<li>How to choose learning rate <code>α</code> </li>
</ol>
<h3 id="Features-and-polynomial-Regression-多项式回归"><a href="#Features-and-polynomial-Regression-多项式回归" class="headerlink" title="Features and polynomial Regression(多项式回归)"></a>Features and polynomial Regression(多项式回归)</h3><p>That is, how to fit a polynomial, like a quadratic function, or a cubic function, to your data</p>
<h2 id="Computing-Parameters-Analytically"><a href="#Computing-Parameters-Analytically" class="headerlink" title="Computing Parameters Analytically"></a>Computing Parameters Analytically</h2><h3 id="Normal-Equation-标准方程法"><a href="#Normal-Equation-标准方程法" class="headerlink" title="Normal Equation(标准方程法)"></a>Normal Equation(标准方程法)</h3><p>Normal Equation: Method to solve for θ Analytically.<br>θ=(X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>y</p>
<p>m training examples, n features<br>the disadvantages and advantages between Gradient Descent and Normal Equation<br>Gradient Descent                               Normal Equation<br>• Need to choose <code>α</code>                           • No need to choose <code>α</code><br>• Needs many iterations.                       • Don’t need to iterate.<br>• Works well even                              • Need to compute (X<sup>T</sup>X)<sup>-1</sup> 时间复杂度 O(n<sup>3</sup>)<br>when <code>n</code> is large.                             • Slow if <code>n</code> is very large (N&gt;10000)</p>
<h3 id="Normal-Equation-Noninvertibility"><a href="#Normal-Equation-Noninvertibility" class="headerlink" title="Normal Equation Noninvertibility"></a>Normal Equation Noninvertibility</h3><p>Normal Equation : θ=(X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>y<br>what if X<sup>T</sup>X is non-invertible?(singular/degenerate)</p>
<ol>
<li>Redundant features(linearly dependent). E.g. x<sub>1</sub>=size in feet <sup>2</sup> x2 = size in m<sup>2</sup></li>
<li>Too many features(e.g.m≤n)<br>·  Delete some features, or use regularization</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prinv(x&apos;*x)*x&apos;*y</div><div class="line">pinv and inv</div><div class="line">pinv函数可以伪逆(Return the pseudoinverse of X.)</div></pre></td></tr></table></figure>
<h2 id="Octave-Tutorial"><a href="#Octave-Tutorial" class="headerlink" title="Octave Tutorial"></a>Octave Tutorial</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">format long/short</div><div class="line">v = 1:0.1:2</div><div class="line">v = 1:6</div><div class="line">ones(1,3)</div><div class="line">C = 2*ones(2,3)</div><div class="line">v = rand(3,3) 随机随机矩阵</div><div class="line">w = randn(1,1000)高斯随机矩阵</div><div class="line">eye(4)单位矩阵</div><div class="line">help rand</div><div class="line">size(A)返回矩阵大小，size(A,1)返回矩阵的行数</div><div class="line">who/whos</div><div class="line">v = princeY(1:10)</div><div class="line">load princeY.dat</div><div class="line">save hello.mat v</div><div class="line">save hello.txt v -ascii</div><div class="line"></div><div class="line">A = [1 2;3 4;5 6]</div><div class="line">A(3,2)</div><div class="line">A(2,:)</div><div class="line">A = [A,[100;101;102]]</div><div class="line">A(:)</div><div class="line"></div><div class="line">A*C</div><div class="line">A.*C</div><div class="line">abs(v)</div><div class="line">log(v)</div><div class="line">exp(v)</div><div class="line">A&apos;</div><div class="line">max(a)</div><div class="line">[val,ind]=max(a)</div><div class="line">max(A)</div><div class="line">magic(Number)</div><div class="line"></div><div class="line">sum</div><div class="line">prod</div><div class="line">floor</div><div class="line">ceil</div><div class="line">max(A,[],1)</div><div class="line">max(max(A))</div><div class="line">sum(sum(A.*eye(9)))</div><div class="line">flipud(eye(9))</div></pre></td></tr></table></figure>
<h2 id="Word-List"><a href="#Word-List" class="headerlink" title="Word List"></a>Word List</h2><p>Feature Scaling: 特征缩放<br>Mean normalization：均值归一化<br>iteration： 迭代<br>converge：使收敛<br>Noninvertibility：不可逆性<br>round off your answer to two decimal ：保留两位小数<br>unvectorized/verctorized : 未向量化的/向量化的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backpropagation-反向传播算法&quot;&gt;&lt;a href=&quot;#Backpropagation-反向传播算法&quot; class=&quot;headerlink&quot; title=&quot;Backpropagation 反向传播算法&quot;&gt;&lt;/a&gt;Backpropagation 反向传播
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ML" scheme="http://wenjiewang.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Multivariate Linear Regression and the Octave</title>
    <link href="http://wenjiewang.top/2016/10/31/ML-second/"/>
    <id>http://wenjiewang.top/2016/10/31/ML-second/</id>
    <published>2016-10-31T01:12:05.000Z</published>
    <updated>2016-11-09T16:02:09.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Enviroment-Setup-Instructions"><a href="#Enviroment-Setup-Instructions" class="headerlink" title="Enviroment Setup Instructions"></a>Enviroment Setup Instructions</h2><h2 id="Multivariate-Linear-Regression"><a href="#Multivariate-Linear-Regression" class="headerlink" title="Multivariate Linear Regression"></a>Multivariate Linear Regression</h2><h3 id="Mutiple-Features"><a href="#Mutiple-Features" class="headerlink" title="Mutiple Features"></a>Mutiple Features</h3><h3 id="Gradient-Descent-for-Multiple-Variables"><a href="#Gradient-Descent-for-Multiple-Variables" class="headerlink" title="Gradient Descent for Multiple Variables"></a>Gradient Descent for Multiple Variables</h3><h3 id="Gradient-Descent-in-Practice-Feature-Scaling"><a href="#Gradient-Descent-in-Practice-Feature-Scaling" class="headerlink" title="Gradient Descent in Practice (Feature Scaling)"></a>Gradient Descent in Practice (Feature Scaling)</h3><p>Make sure features are on a similar scale.</p>
<p>Get every Feature into approximately a -1 ≤ x<sub>i</sub> ≤ 1 range<br>将数据集（训练集）进行缩放，原因是直接使用原始的数据集进行梯度下降，迭代次数会非常多而且相当复杂。</p>
<p><strong>Mean normalization</strong> Replace x<sub>i</sub> with x<sub>i</sub> - u<sub>i</sub> (average value) / s<sub>i</sub> (range) to make features have approximately zero mean (Do not apply to x<sub>0</sub> = 1)</p>
<h3 id="Gradient-Descent-in-Practice-Learning-Rate"><a href="#Gradient-Descent-in-Practice-Learning-Rate" class="headerlink" title="Gradient Descent in Practice (Learning Rate)"></a>Gradient Descent in Practice (Learning Rate)</h3><ol>
<li>“Debugging”: How to make sure gradient descent is working correctly</li>
</ol>
<p>example automatic convergence test: Declare convergence if  J(θ) decrease by less than 10 <sup>-3</sup> in one iteration<br>Gradient descent not working : use smaller <code>α</code> </p>
<p><code>α</code> 很足够小，那么每次迭代后的梯度都会下降，但是收敛的速度很慢<br><code>α</code> 太大了，不能够每次迭代梯度都能下降，可能造成不收敛（may not converge or slow converge)</p>
<ol>
<li>How to choose learning rate <code>α</code> </li>
</ol>
<h3 id="Features-and-polynomial-Regression-多项式回归"><a href="#Features-and-polynomial-Regression-多项式回归" class="headerlink" title="Features and polynomial Regression(多项式回归)"></a>Features and polynomial Regression(多项式回归)</h3><p>That is, how to fit a polynomial, like a quadratic function, or a cubic function, to your data</p>
<h2 id="Computing-Parameters-Analytically"><a href="#Computing-Parameters-Analytically" class="headerlink" title="Computing Parameters Analytically"></a>Computing Parameters Analytically</h2><h3 id="Normal-Equation-标准方程法"><a href="#Normal-Equation-标准方程法" class="headerlink" title="Normal Equation(标准方程法)"></a>Normal Equation(标准方程法)</h3><p>Normal Equation: Method to solve for θ Analytically.<br>θ=(X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>y</p>
<p>m training examples, n features<br>the disadvantages and advantages between Gradient Descent and Normal Equation<br>Gradient Descent                               Normal Equation<br>• Need to choose <code>α</code>                           • No need to choose <code>α</code><br>• Needs many iterations.                       • Don’t need to iterate.<br>• Works well even                              • Need to compute (X<sup>T</sup>X)<sup>-1</sup> 时间复杂度 O(n<sup>3</sup>)<br>when <code>n</code> is large.                             • Slow if <code>n</code> is very large (N&gt;10000)</p>
<h3 id="Normal-Equation-Noninvertibility"><a href="#Normal-Equation-Noninvertibility" class="headerlink" title="Normal Equation Noninvertibility"></a>Normal Equation Noninvertibility</h3><p>Normal Equation : θ=(X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>y<br>what if X<sup>T</sup>X is non-invertible?(singular/degenerate)</p>
<ol>
<li>Redundant features(linearly dependent). E.g. x<sub>1</sub>=size in feet <sup>2</sup> x2 = size in m<sup>2</sup></li>
<li>Too many features(e.g.m≤n)<br>·  Delete some features, or use regularization</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prinv(x&apos;*x)*x&apos;*y</div><div class="line">pinv and inv</div><div class="line">pinv函数可以伪逆(Return the pseudoinverse of X.)</div></pre></td></tr></table></figure>
<h2 id="Octave-Tutorial"><a href="#Octave-Tutorial" class="headerlink" title="Octave Tutorial"></a>Octave Tutorial</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">format long/short</div><div class="line">v = 1:0.1:2</div><div class="line">v = 1:6</div><div class="line">ones(1,3)</div><div class="line">C = 2*ones(2,3)</div><div class="line">v = rand(3,3) 随机随机矩阵</div><div class="line">w = randn(1,1000)高斯随机矩阵</div><div class="line">eye(4)单位矩阵</div><div class="line">help rand</div><div class="line">size(A)返回矩阵大小，size(A,1)返回矩阵的行数</div><div class="line">who/whos</div><div class="line">v = princeY(1:10)</div><div class="line">load princeY.dat</div><div class="line">save hello.mat v</div><div class="line">save hello.txt v -ascii</div><div class="line"></div><div class="line">A = [1 2;3 4;5 6]</div><div class="line">A(3,2)</div><div class="line">A(2,:)</div><div class="line">A = [A,[100;101;102]]</div><div class="line">A(:)</div><div class="line"></div><div class="line">A*C</div><div class="line">A.*C</div><div class="line">abs(v)</div><div class="line">log(v)</div><div class="line">exp(v)</div><div class="line">A&apos;</div><div class="line">max(a)</div><div class="line">[val,ind]=max(a)</div><div class="line">max(A)</div><div class="line">magic(Number)</div><div class="line"></div><div class="line">sum</div><div class="line">prod</div><div class="line">floor</div><div class="line">ceil</div><div class="line">max(A,[],1)</div><div class="line">max(max(A))</div><div class="line">sum(sum(A.*eye(9)))</div><div class="line">flipud(eye(9))</div></pre></td></tr></table></figure>
<h2 id="Word-List"><a href="#Word-List" class="headerlink" title="Word List"></a>Word List</h2><p>Feature Scaling: 特征缩放<br>Mean normalization：均值归一化<br>iteration： 迭代<br>converge：使收敛<br>Noninvertibility：不可逆性<br>round off your answer to two decimal ：保留两位小数<br>unvectorized/verctorized : 未向量化的/向量化的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Enviroment-Setup-Instructions&quot;&gt;&lt;a href=&quot;#Enviroment-Setup-Instructions&quot; class=&quot;headerlink&quot; title=&quot;Enviroment Setup Instructions&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ML" scheme="http://wenjiewang.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Introduction of Machine Learning</title>
    <link href="http://wenjiewang.top/2016/10/26/ML-introduction/"/>
    <id>http://wenjiewang.top/2016/10/26/ML-introduction/</id>
    <published>2016-10-26T04:11:05.000Z</published>
    <updated>2016-11-09T16:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习是一门研究在非特定编程条件下让计算机采取行动的学科。最近二十年，机器学习为我们带来了自动驾驶汽车、实用的语音识别、高效的网络搜索，让我们对人类基因的解读能力大大提高。当今机器学习技术已经非常普遍，您很可能在毫无察觉情况下每天使用几十次。许多研究者还认为机器学习是人工智能（AI）取得进展的最有效途径。在本课程中，您将学习最高效的机器学习技术，了解如何使用这些技术，并自己动手实践这些技术。更重要的是，您将不仅将学习理论知识，还将学习如何实践，如何快速使用强大的技术来解决新问题。最后，您将了解在硅谷企业如何在机器学习和AI领域进行创新。 本课程将广泛介绍机器学习、数据挖掘和统计模式识别。相关主题包括：(i) 监督式学习（参数和非参数算法、支持向量机、核函数和神经网络）。(ii) 无监督学习（集群、降维、推荐系统和深度学习）。(iii) 机器学习实例（偏见/方差理论；机器学习和AI领域的创新）。课程将引用很多案例和应用，您还需要学习如何在不同领域应用学习算法，例如智能机器人（感知和控制）、文本理解（网络搜索和垃圾邮件过滤）、计算机视觉、医学信息学、音频、数据库挖掘等领域。</p>
<p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
<p><em>careful abut the meanning of E P T</em></p>
<p>Example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Classifying emails as spam or not spam.---&gt; T</div><div class="line">Watching you label emails as spam or not spam. ---&gt;E </div><div class="line">The number (or fraction) of emails correctly classified as spam/not spam. ----&gt;P</div></pre></td></tr></table></figure>
<h2 id="supervised-learning（有监督的学习）"><a href="#supervised-learning（有监督的学习）" class="headerlink" title="supervised learning（有监督的学习）"></a>supervised learning（有监督的学习）</h2><p>the term supervised learning refers to the fact that we gave the algorithm a data set in which the “right answers” were given. </p>
<h3 id="regression-problem"><a href="#regression-problem" class="headerlink" title="regression problem"></a>regression problem</h3><p>To define with a bit more terminology this is also called a regression problem and by regression problem I mean we’re trying to predict a <strong>continuous</strong> value output.</p>
<h3 id="classification-problem"><a href="#classification-problem" class="headerlink" title="classification problem"></a>classification problem</h3><p>The term classification refers to the fact that here we’re trying to predict a <strong>discrete</strong> value output: zero or one, malignant or benign.<br>example:  Given email labeled as spam/not spam, learn a spam filter(垃圾邮件的分类)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a quadratic function or a seconde-order polynomial一个二次函数或者一个二次多项式</div><div class="line">a breast cancer as malignant or benign 恶性/良性</div><div class="line">clump thickness </div><div class="line">uniformity of cell size/shape</div></pre></td></tr></table></figure>
<p>(a) Regression - Given a picture of Male/Female, we have to predict his/her age on the basis of the given picture.<br>(b) Classification - Given a patient with a tumor/diabetes, we have to predict whether the tumor is malignant or benign.</p>
<h2 id="unsupervised-learning（无监督的学习）or-clustering（聚类）"><a href="#unsupervised-learning（无监督的学习）or-clustering（聚类）" class="headerlink" title="unsupervised learning（无监督的学习）or clustering（聚类）"></a>unsupervised learning（无监督的学习）or clustering（聚类）</h2><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p>
<p>examples</p>
<ol>
<li>google news</li>
<li>understanding genomics(<strong>clustering</strong>). Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</li>
<li><p>Cocktail(鸡尾酒) party problem algorithm(<strong>Non-clustering</strong>). The “Cocktail Party Algorithm”, allows you to find structure in a chaotic environment. (i.e. identifying individual voices and music from a mesh of sounds at a cocktail party).<br>Octave(similar to Matlab)<br><code>[W,s,v] = svd((repmat(sum(x.*x,1),size(x,1),1).*x)*x&#39;);</code></p>
</li>
<li><p>The market segmentation example </p>
</li>
<li>Astronomical data analysis</li>
</ol>
<h2 id="Linear-regression-with-one-variable"><a href="#Linear-regression-with-one-variable" class="headerlink" title="Linear regression with one variable"></a>Linear regression with one variable</h2><p>Training Set–&gt;Learning Algorithm –&gt; hypothesis(假设)</p>
<p>Linear regression with one variable == univariate linear regression</p>
<p><strong>cost function</strong> == squared errror cause function<br><strong>Gradient Descent</strong>(梯度下降) can coverge to a local minimum, even with the learning rate <code>α</code> <strong>fixed</strong>. As we approach a local minimum, gradient descent will automatically take smaller steps. So, no need to decrease <code>α</code> over time.(the result is a local optimus)<br>If <code>α</code> is too small,’gradient descent can be slow.If <code>α</code> is too large, gradient descent can overshoot the minimum. It may fail to converge, or even diverge.<br><strong>Batch Gradient Descent</strong>  batch : Each step of gradient descent uses all the training examples.</p>
<h2 id="Linear-Algebra-Review"><a href="#Linear-Algebra-Review" class="headerlink" title="Linear Algebra Review"></a>Linear Algebra Review</h2><p><strong>Matrix</strong> : Rectangular array of numbers<br>Dimension of matrix: number of rows x(by) number of columns</p>
<p><strong>Vector</strong> : An n x 1 matrix.  –&gt; n-dimensional vector</p>
<p><strong>Indentity Matrix</strong> </p>
<p><strong>Inverse Matrix</strong></p>
<p><strong>Transpose Matrix</strong></p>
<h2 id="WordList"><a href="#WordList" class="headerlink" title="WordList"></a>WordList</h2><ol>
<li>a quadratic function or a seconde-order polynomial一个二次函数或者一个二次多项式</li>
<li>a breast cancer as malignant or benign 恶性/良性</li>
<li>clump thickness 肿瘤块的浓度</li>
<li>uniformity of cell size/shape</li>
<li>fraction of emails correctly classified as spam / not spam.</li>
<li>You have a large <strong>inventory</strong> of identical items</li>
<li><strong>Cocktail</strong> party problem</li>
<li>Machine learning is the field of study that gives computers the ability to learn without being <strong>explicitly</strong>programmed.</li>
<li>contour plots/figures</li>
<li>the derivative term</li>
<li>caculus</li>
<li>convex function == bowl-shaped</li>
<li>scalar multiplication == real number multiplication</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习是一门研究在非特定编程条件下让计算机采取行动的学科。最近二十年，机器学习为我们带来了自动驾驶汽车、实用的语音识别、高效的网络搜索，让我们对人类基因的解读能力大大提高。当今机器学习技术已经非常普遍，您很可能在毫无察觉情况下每天使用几十次。许多研究者还认为机器学习是人工
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ML" scheme="http://wenjiewang.top/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number</title>
    <link href="http://wenjiewang.top/2016/10/25/Leetcode-406/"/>
    <id>http://wenjiewang.top/2016/10/25/Leetcode-406/</id>
    <published>2016-10-24T16:16:23.000Z</published>
    <updated>2016-10-25T01:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第406题</p>
<h1 id="题目406-Queue-Reconstruction-by-Height"><a href="#题目406-Queue-Reconstruction-by-Height" class="headerlink" title="题目406 Queue Reconstruction by Height"></a>题目406 Queue Reconstruction by Height</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers <code>(h, k)</code>, where h is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.</p>
<p>Example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</div><div class="line"></div><div class="line">Output:</div><div class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</div></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>刚刚看到题目时候是想按照身高进行从大到小排序，如果第一个数相同则第二个数小的要大（即要在前面）。<br>例如排序后序列为<code>[[7,0], [7,1], [6,1], [5,0], [5,2], [4,4]]</code><br>然后从已排序好的数组people数组第一个元素开始，放入到数组result中，放入的位置就是离result开始位置偏移了元素第二个数字后的位置。如下： </p>
<ol>
<li>people: [7,0]<br>插入到离开始位置偏移了0个距离的位置。<br>result: [[7,0]] </li>
<li>people: [7,1]<br>插入到离开始位置偏移了1个距离的位置，即插入到[7,0]的后面。<br>result: [[7,0], [7,1]] </li>
<li>people: [6,1]<br>插入到离开始位置偏移了1个距离的位置，即插入到[7,0]的后面。<br>result: [[7,0], [6,1], [7,1]] </li>
<li>people: [5,0]<br>插入到离开始位置偏移了0个距离的位置，即插入到[7,0]的前面。<br>result: [[5,0], [7,0], [6,1], [7,1]] </li>
<li>people: [5,2]<br>插入到离开始位置偏移了2个距离的位置，即插入到[7,0]的后面。<br>result: [[5,0], [7,0], [5,2], [6,1], [7,1]] </li>
<li>people: [4,4]<br>插入到离开始位置偏移了4个距离的位置，即插入到[6,1]的后面。<br>result: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</li>
</ol>
<p>java代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">//注意这里用二维数组来表示键值对，即该数组有n行，2列，一定是两列，否则返回people</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] reconstructQueue(<span class="keyword">int</span>[][] people) &#123;</div><div class="line">        <span class="keyword">if</span> (people == <span class="keyword">null</span> || people.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> people;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将数组排序</span></div><div class="line">        Arrays.sort(people, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</div><div class="line">                <span class="comment">//相等情况下比较第二个数的大小，第二个数小的大</span></div><div class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] == o2[<span class="number">0</span>] ? o1[<span class="number">1</span>] - o2[<span class="number">1</span>] : o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">int</span> n = people.length;</div><div class="line">        <span class="keyword">int</span>[][] ret = <span class="keyword">new</span> <span class="keyword">int</span>[n][];</div><div class="line">        <span class="comment">//从已排序的第一个元素开始，</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, ahead = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="comment">//ahead是偏移量</span></div><div class="line">                <span class="keyword">if</span> (ahead &lt; people[i][<span class="number">1</span>]) &#123;</div><div class="line">                    ahead += (ret[j] == <span class="keyword">null</span> || ret[j][<span class="number">0</span>] &gt;= people[i][<span class="number">0</span>]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret[j] == <span class="keyword">null</span>) &#123;</div><div class="line">                    ret[j] = people[i];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第406题&lt;/p&gt;
&lt;h1 id=&quot;题目406-Queue-Reconst
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>R Learnning</title>
    <link href="http://wenjiewang.top/2016/10/20/R-Summary/"/>
    <id>http://wenjiewang.top/2016/10/20/R-Summary/</id>
    <published>2016-10-20T14:48:19.000Z</published>
    <updated>2016-10-20T14:55:04.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="R语言学习"><a href="#R语言学习" class="headerlink" title="R语言学习"></a>R语言学习</h2><p>Everything in R is an <strong>object</strong>; Every object in R has a <strong>class</strong>;<br>一切皆对象，每个对象都有类；</p>
<h3 id="R基本语法"><a href="#R基本语法" class="headerlink" title="R基本语法"></a>R基本语法</h3><p>R语言也支持<strong>table键</strong>自动补全</p>
<h4 id="获取help"><a href="#获取help" class="headerlink" title="获取help"></a>获取help</h4><ol>
<li><code>&gt; help.start()</code>开启帮助文档</li>
<li><code>&gt;help(solve)</code> 显示某命令的帮助信息，或者 <code>&gt;?solve</code></li>
<li>对于由特殊字符指定的功能，这些参数必须用单引号或双引号括起来，使之成为一个“字符串”,如<code>&gt; help(&quot;[[&quot;)</code></li>
<li>与某个主题相关的例子通常可以用下面的命令得到<br><code>&gt; example(topic)</code></li>
</ol>
<h4 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h4><ol>
<li>R对大小写是敏感的；名称不能以数字开始；</li>
<li>基本的命令由表达式或者赋值语句组成。如果一个表达式被作为一条命令给出，它将被求值、打印而表达式的值并不被保存。一个赋值语句同样对表达式求值之后把表达式的值传给一个变量，不过并不会自动的被打印出来；</li>
<li>命令由分号(;)来分隔，或者另起新行；</li>
<li>基本命令可以由花括号(f和g)合并为一组复合表达式；</li>
<li>注释几乎可以被放在任何地方，只要是以井号( # )开始，到行末结束；</li>
<li>如果一个命令在行末仍没有结束，R将会给出一个不同的提示符，默认的是‘+’。</li>
</ol>
<h4 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h4><p>“numeric” is a class corresponding to numeric vectors. The other vector basic classes are “logical”, “integer”, “complex”, “character”, “raw”, “list” and “expression”.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. 逻辑 TRUE,FALSE 只能大写，false，true等都不是</span></div><div class="line">v &lt;- <span class="literal">TRUE</span></div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "logical" </span></div><div class="line"></div><div class="line"><span class="comment">#2. 数字  12.3,5,999</span></div><div class="line">v &lt;- <span class="number">23.5</span></div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "numeric" </span></div><div class="line"></div><div class="line"><span class="comment">#3. 整数  2L, 34L, 0L </span></div><div class="line">v &lt;- <span class="number">2L</span> </div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "integer" </span></div><div class="line"></div><div class="line"><span class="comment">#4. 复数  3 + 2i </span></div><div class="line">v &lt;- <span class="number">3</span> + <span class="number">2i</span> </div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "complex"</span></div><div class="line"></div><div class="line"><span class="comment">#5.字符 'a' , '"good", "TRUE", '23.4' </span></div><div class="line">v &lt;- <span class="string">"Hello"</span></div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "character"</span></div><div class="line"></div><div class="line"><span class="comment">#6.原始  "Hello" 将被存储为 48 65 6c 6c 6f </span></div><div class="line">v &lt;- charToRaw(<span class="string">"Hello"</span>)</div><div class="line">print(class(v))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "raw"</span></div></pre></td></tr></table></figure>
<p>因此，在R语言中的非常基本的数据类型是R-对象，如上图所示占据着不同类别的元素向量。请注意R语言中类的数量并不只限于上述的六种类型。 例如，我们可以使用许多原子向量以及创建一个数组，它的类将成为数组。 </p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ol>
<li>向量vector<br>当希望使用多个元素创建向量，应该使用<code>c()</code>函数，这意味着元素结合成一个向量。</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">apple &lt;- c(<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">"yellow"</span>)</div><div class="line">print(apple)</div><div class="line">print(class(apple))</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[1] "red" "green"  "yellow"</span></div><div class="line"><span class="comment">#[1] "character"</span></div></pre></td></tr></table></figure>
<ol>
<li>列表list<br>列表是R-对象，它里面可以包含多个不同类型的元素，如向量，函数，甚至是另一个列表。</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">list1 &lt;- list(c(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>),<span class="number">21.3</span>,sin)</div><div class="line">print(list1)</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#[[1]]</span></div><div class="line"><span class="comment">#[1] 2 5 3</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#[[2]]</span></div><div class="line"><span class="comment">#[1] 21.3</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#[[3]]</span></div><div class="line"><span class="comment">#function (x)  .Primitive("sin")</span></div></pre></td></tr></table></figure>
<ol>
<li>矩阵<br>矩阵是一个二维矩形数据集。它可以使用一个向量输入到矩阵函数来创建。 </li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">M = matrix( c(<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>), nrow=<span class="number">2</span>,ncol=<span class="number">3</span>,byrow = <span class="literal">TRUE</span>)</div><div class="line">print(M)</div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="comment">#     [,1] [,2] [,3]</span></div><div class="line"><span class="comment">#[1,] "a"  "a"  "b" </span></div><div class="line"><span class="comment">#[2,] "c"  "b"  "a"</span></div></pre></td></tr></table></figure>
<ol>
<li>数组<br>尽管矩阵限于两个维度，数组可以是任何数目的尺寸大小。数组函数使用它创建维度的所需数量的属性-dim。在下面的例子中，我们创建了两个元素数组，这是3×3矩阵。</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a &lt;- array(c(<span class="string">'green'</span>,<span class="string">'yellow'</span>),dim=c(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>))</div><div class="line">print(a)</div></pre></td></tr></table></figure>
<ol>
<li>因子<br>因子是使用向量创建的R对象。它存储随同该向量作为标记元素的不同值的向量。 标签始终是字符，而不论它在输入向量的是数字或字符或布尔等。它们在统计建模有用。<br>运用<code>factor()</code> 函数创建因子。nlevels 函数给出级别的计数。 </li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a vector.</span></div><div class="line">apple_colors &lt;- c(<span class="string">'green'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'red'</span>,<span class="string">'red'</span>,<span class="string">'red'</span>,<span class="string">'green'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Create a factor object.</span></div><div class="line">factor_apple &lt;- factor(apple_colors)</div><div class="line"></div><div class="line"><span class="comment"># Print the factor.</span></div><div class="line">print(factor_apple)</div><div class="line">print(nlevels(factor_apple))</div></pre></td></tr></table></figure>
<ol>
<li>数据帧<br>数据帧是表格数据对象。不像在数据帧的矩阵，每一列可以包含不同的数据的模型。第一列可以是数字，而第二列可能是字符和第三列可以是逻辑。它与向量列表的长度相等。<br>数据帧所使用 <code>data.frame()</code>函数来创建。 </li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create the data frame.</span></div><div class="line">BMI &lt;- 	data.frame(</div><div class="line">			gender = c(<span class="string">"Male"</span>, <span class="string">"Male"</span>,<span class="string">"Female"</span>), </div><div class="line">			height = c(<span class="number">152</span>, <span class="number">171.5</span>, <span class="number">165</span>), </div><div class="line">			weight = c(<span class="number">81</span>,<span class="number">93</span>, <span class="number">78</span>),</div><div class="line">			Age =c(<span class="number">42</span>,<span class="number">38</span>,<span class="number">26</span>)</div><div class="line">			)</div><div class="line">print(BMI)</div></pre></td></tr></table></figure>
<h4 id="R语言变量与运算符"><a href="#R语言变量与运算符" class="headerlink" title="R语言变量与运算符"></a>R语言变量与运算符</h4><ol>
<li>变量命名规范<br>变量名由有字母，数字，<strong>点</strong>和下划线组成，数字不能开头，且若点开头，点<code>.</code>后不能跟一个数字</li>
</ol>
<p style="color:red;">.2invalid  2invalid  (非法命名)</p>

<p style="color:blue;">.v2alid  valid  (合法命名)</p>


<ol>
<li>变量赋值</li>
</ol>
<p>变量可以使用<strong>向左(&lt;-)</strong>，<strong>向右(-&gt;)</strong>或者<strong>等于</strong>操作符来分配值。可以使用 print() 或 cat() 函数打印变量的值。cat() 函数将多个项目并成连续并打印输出。 </p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#c()函数用来新建一个向量</span></div><div class="line"><span class="comment"># Assignment using equal operator.</span></div><div class="line">var.1 = c(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)           </div><div class="line"></div><div class="line"><span class="comment"># Assignment using leftward operator.</span></div><div class="line">var.2 &lt;- c(<span class="string">"learn"</span>,<span class="string">"R"</span>)   </div><div class="line"></div><div class="line"><span class="comment"># Assignment using rightward operator.   </span></div><div class="line">c(<span class="literal">TRUE</span>,<span class="number">1</span>) -&gt; var.3           </div><div class="line"></div><div class="line">print(var.1)</div><div class="line">cat (<span class="string">"var.1 is "</span>, var.1 ,<span class="string">"\n"</span>)</div><div class="line">cat (<span class="string">"var.2 is "</span>, var.2 ,<span class="string">"\n"</span>)</div><div class="line">cat (<span class="string">"var.3 is "</span>, var.3 ,<span class="string">"\n"</span>)</div><div class="line"><span class="comment">#注意矢量c（TRUE，1）有逻辑和数值类的混合。因此，逻辑类强迫转换到数字类，如TRUE为1</span></div></pre></td></tr></table></figure>
<ol>
<li>变量的数据类型 </li>
</ol>
<p>在R，变量本身不需要声明成任何数据类型，但它得到分配给它的是 R-对象的数据类型。所以R被称为<strong>动态类型的语言</strong>，这意味着我们可以当在程序中使用它，并可再次并<strong>改变相同变量的变量的数据类型</strong>。<br><code>class()</code>函数用来查询参数的数据类型</p>
<ol>
<li>查找变量</li>
</ol>
<p>要知道目前在工作区中的可用变量，可以使用 <code>ls()</code>函数列出所有变量。另外，<code>ls()</code> 函数可以使用模式来匹配变量名称。<br>在 ls() 函数可以使用模式匹配变量名。<code>print(ls(pattern=&quot;var&quot;))</code>列出参数中包含var的参数名称。<br>以点(.) 开始的变量是隐藏的，它们可以使用 “all.names= TRUE” 参数给 <code>ls()</code>函数来列出。即<code>ls(all.name=TRUE)</code></p>
<ol>
<li>删除变量</li>
</ol>
<p>变量可以通过使用<code>rm()</code>函数来删除。下面我们删除变量<code>var.3</code>。然后再打印变量时出现异常错误。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm(var.3)</div><div class="line">print(var.3)</div></pre></td></tr></table></figure>
<p>当上面的代码执行时，它产生以下结果： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1] &quot;var.3&quot;</div><div class="line">Error in print(var.3) : object &apos;var.3&apos; not found</div></pre></td></tr></table></figure>
<p>所有的变量可以通过使用<code>rm()</code>和 <code>ls()</code>函数来一起删除。 </p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm(list=ls())</div><div class="line">print(ls())</div></pre></td></tr></table></figure>
<ol>
<li>算术运算符</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#加法减法  两个向量相加、相减，下面给出加法的例子和结果 </span></div><div class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</div><div class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">print(v+t)</div><div class="line"><span class="comment">#[1] 10.0  8.5  10.0</span></div><div class="line"></div><div class="line"><span class="comment">#乘法除法  两个向量乘、除，</span></div><div class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</div><div class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">print(v/t)</div><div class="line"><span class="comment">#[1] 0.250000 1.833333 1.500000</span></div><div class="line"></div><div class="line"><span class="comment">#取余%% 得到第一矢量与第二个矢量余数 </span></div><div class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</div><div class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">print(v%%t)</div><div class="line"><span class="comment">#[1] 2.0 2.5 2.0</span></div><div class="line"></div><div class="line"><span class="comment">#%/% 第一个向量与第二（商）相除的结果 ，保留整数（即整除）</span></div><div class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</div><div class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">print(v%/%t)</div><div class="line"><span class="comment">#[1] 0 1 1</span></div><div class="line"></div><div class="line"><span class="comment">#^ 第一向量提升到第二向量的指数 </span></div><div class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</div><div class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">print(v^t)</div><div class="line"><span class="comment">#[1]  256.000  166.375 1296.000</span></div></pre></td></tr></table></figure>
<ol>
<li><p>关系运算符、逻辑运算符和其他运算符</p>
</li>
<li><p>关系运算符<code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code></p>
</li>
<li>逻辑运算符<code>&amp; | !</code>第一向量的每个元素与所述第二向量的相应元素进行比较。比较的结果是一个布尔值。<br>所有数值大于1则认为逻辑值为TRUE。<strong>复数的逻辑值为TRUE</strong><br>逻辑运算符<code>&amp;&amp;</code>和<code>||</code>考虑矢量仅第一元素并给单个元素作为输出的向量。</li>
<li>其他运算符</li>
</ol>
<p><code>:</code>冒号运算符。它创建顺序一系列数字的向量 </p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v &lt;- <span class="number">2</span>:<span class="number">8</span></div><div class="line">print(v) </div><div class="line"><span class="comment">#[1] 2 3 4 5 6 7 8</span></div></pre></td></tr></table></figure>
<p><code>%in%</code> 这个操作符用于识别一个元素是否属于（在）一个向量。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">v1 &lt;- <span class="number">8</span></div><div class="line">v2 &lt;- <span class="number">12</span></div><div class="line">t &lt;- <span class="number">1</span>:<span class="number">10</span></div><div class="line">print(v1 %<span class="keyword">in</span>% t) </div><div class="line">print(v2 %<span class="keyword">in</span>% t) </div><div class="line"><span class="comment">#[1] TRUE</span></div><div class="line"><span class="comment">#[1] FALSE </span></div><div class="line">``` </div><div class="line"></div><div class="line">`%*% `这个操作符是用来乘以它的转置矩阵。 </div><div class="line"></div><div class="line">```R</div><div class="line"><span class="comment">#t()函数矩阵转置</span></div><div class="line">M = matrix( c(<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>), nrow=<span class="number">2</span>,ncol=<span class="number">3</span>,byrow = <span class="literal">TRUE</span>)</div><div class="line">t = M %*% t(M)</div><div class="line">print(t)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;R语言学习&quot;&gt;&lt;a href=&quot;#R语言学习&quot; class=&quot;headerlink&quot; title=&quot;R语言学习&quot;&gt;&lt;/a&gt;R语言学习&lt;/h2&gt;&lt;p&gt;Everything in R is an &lt;strong&gt;object&lt;/strong&gt;; Every objec
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="R" scheme="http://wenjiewang.top/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Chapter Two and One</title>
    <link href="http://wenjiewang.top/2016/09/28/Chapter-Four/"/>
    <id>http://wenjiewang.top/2016/09/28/Chapter-Four/</id>
    <published>2016-09-28T04:11:05.000Z</published>
    <updated>2016-09-29T13:59:28.255Z</updated>
    
    <content type="html"><![CDATA[<p>算法导论（Introduction to Algorithm）</p>
<h3 id="最短路径和旅行商问题"><a href="#最短路径和旅行商问题" class="headerlink" title="最短路径和旅行商问题"></a>最短路径和旅行商问题</h3><p>相似之处：都是寻求最短的路线<br>不同之处：最短路线问题是从若干条可选线路中选择一条线路使之在两个点之间达到交通路径最短，不需要经过所有的点；旅行商人问题中如果把仓库看做是图中的一个<br>点的话，首先要满足遍历所有的点，然后在所有满足的线路中选择最短的线路，其复杂程度要高于最短路径。</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入算法的设计使用的是增量（incremental）方法：在排好子数组A[1..j-1]后，将元素A[j]插入，形成排好序的子数组A[1..j]。伪代码如下，伪代码中<strong>数组是从1开始的</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSERTION-SORT(A)</div><div class="line">1 for j = 2 to length[A]</div><div class="line">2   key = A[j]</div><div class="line">3   //Insert A[j] into the sorted sequence A[1..j-1]</div><div class="line">4   i = j-1</div><div class="line">5   while i &gt; 0 and A[i] &gt; key</div><div class="line">6       A[i+1]=A[i]</div><div class="line">7       i = i − 1</div><div class="line">8   A[i+1]=key</div></pre></td></tr></table></figure>
<p>插入排序的java算法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> len = a.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;len;j++)&#123;</div><div class="line">            <span class="keyword">int</span> key = a[j];</div><div class="line">            <span class="keyword">int</span> i = j-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;a[i]&gt;key)&#123;</div><div class="line">                a[i+<span class="number">1</span>]=a[i];</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">            a[i+<span class="number">1</span>]=key;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InsertSort is = <span class="keyword">new</span> InsertSort();</div><div class="line">        <span class="keyword">int</span> num=<span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            a[i]= (<span class="keyword">int</span>) (Math.random()*num);<span class="comment">//Math.random()随机产生[0,1]的双精度浮点数</span></div><div class="line">        is.inserSort(a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环不变式"><a href="#循环不变式" class="headerlink" title="循环不变式"></a>循环不变式</h3><p>循环不变式(Loop Invariant)是证明算法正确性的一个重要工具。对于循环不变式，必须证明它的三个性质：<br><br><strong>初始化(Initialization)</strong>：它在循环的第一轮迭代开始之前，应该是正确的。 <br><br><strong>保持(Maintenance)</strong>：如果在循环的某一次迭代开始之前它是正确的，那么，在下一次迭代开始之前，它也是正确的。<br><strong>终止(Termination)</strong>：当循环结束时，不变式给了我们一个有用的性质，它有助于表明算法是正确的。 <br></p>
<p>运用循环不变式对插入排序算法的正确性进行证明：<br><strong>初始化</strong>：j=2，子数组 A[1..j-1]只包含一个元素 A[1],显然它是已排序的。<br><strong>保持</strong>： 若A[1..j-1]是已排序的， 则按照大小确定了插入元素 A[j]位置之后的数组A[1..j]显然也是已排序的。<br><strong>终止</strong>：当 j=n+1 时，退出循环，此时已排序的数组是由 A[1],A[2],A[3]…A[n]组成的A[1..n]，此即原始数组 A。</p>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p><strong>分治法（divide-and-conquer）</strong>:有很多算法在结构上是递归的：为了解决一个给定的问题，算法要一次戒多次地递归调用其自身来解决相关的问题。这些算法通常采用分治策略：将原问题划分成 n 个规模较小而结构不原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。</p>
<p>分治模式在每一层递归上都有三个步骤：<br><strong>分解（Divide）</strong>：将原问题分解成一系列子问题；<br><strong>解决（Conquer）</strong>：递归地解各子问题。若子问题足够小，则直接求解；<br><strong>合并（Combine）</strong>：将子问题的结果合并成原问题的解。</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是基于分治法。<br><strong>分解</strong>：将 n 个元素分成各含 n/2 个元素的子序列；<br><strong>解决</strong>：用合并排序法对两个子序列递归地排序；<br><strong>合并</strong>：合并两个已排序的子序列以得到排序结果。<br>归并排序伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MERGE(A,p,q,r)</div><div class="line">1 n1 = q − p + 1</div><div class="line">2 n2 = r − q</div><div class="line">3 create arrays L[1..n1 + 1] and R[1..n2 + 1]</div><div class="line">4 for i = 1 to n1</div><div class="line">5   L[i]=A[p+i-1]</div><div class="line">6 for j=1 to n2</div><div class="line">7   R[j]=A[q+j]</div><div class="line">8 L[n1 + 1]= ∞</div><div class="line">9 R[n2 + 1]= ∞</div><div class="line">10 i = 1</div><div class="line">11 j = 1</div><div class="line">12 for k =p to r</div><div class="line">13  if L[i]≤R[j]</div><div class="line">14      A[k]=L[i]</div><div class="line">15      i = i + 1</div><div class="line">16  else A[k]=R[j]</div><div class="line">17      j = j + 1</div><div class="line">MERGE-SORT(A,p,r)</div><div class="line">1 if p&lt;r</div><div class="line">2   q= (p+r)/2</div><div class="line">3   MERGE-SORT(A,p,r)</div><div class="line">4   MERGE-SORT(A,q+1,r)</div><div class="line">5   MERGE-SORT(A,p,q,r)</div></pre></td></tr></table></figure>
<p>java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</div><div class="line">    <span class="comment">//归并算法</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> p,<span class="keyword">int</span> q,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> []m = <span class="keyword">new</span> <span class="keyword">int</span>[q-p+<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> []n = <span class="keyword">new</span> <span class="keyword">int</span>[r-q];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=p;j&lt;=q;i++,j++)</div><div class="line">            m[i]=a[j];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=q+<span class="number">1</span>;j&lt;=r;i++,j++)</div><div class="line">            n[i]=a[j];</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;m.length&amp;&amp;j&lt;n.length)&#123;</div><div class="line">            <span class="keyword">if</span>(m[i]&gt;n[j])a[p++]=n[j++];</div><div class="line">            <span class="keyword">else</span> a[p++]=m[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;m.length)a[p++]=m[i++];</div><div class="line">        <span class="keyword">while</span>(j&lt;n.length)a[p++]=n[j++];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//递归进行归并排序</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> p,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">            <span class="keyword">int</span> q=(p+r)/<span class="number">2</span>;</div><div class="line">            merge_sort(a,p,q);</div><div class="line">            merge_sort(a,q+<span class="number">1</span>,r);</div><div class="line">            merge(a,p,q,r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Merge merge = <span class="keyword">new</span> Merge();</div><div class="line">        <span class="keyword">int</span> num=<span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            a[i]= (<span class="keyword">int</span>) (Math.random()*num);<span class="comment">//Math.random()随机产生[0,1]的双精度浮点数</span></div><div class="line">        merge.merge_sort(a,<span class="number">0</span>,num-<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法导论（Introduction to Algorithm）&lt;/p&gt;
&lt;h3 id=&quot;最短路径和旅行商问题&quot;&gt;&lt;a href=&quot;#最短路径和旅行商问题&quot; class=&quot;headerlink&quot; title=&quot;最短路径和旅行商问题&quot;&gt;&lt;/a&gt;最短路径和旅行商问题&lt;/h3&gt;&lt;p
    
    </summary>
    
      <category term="算法导论" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="sort" scheme="http://wenjiewang.top/tags/sort/"/>
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Chapter Two and One</title>
    <link href="http://wenjiewang.top/2016/09/28/Chapter-Two/"/>
    <id>http://wenjiewang.top/2016/09/28/Chapter-Two/</id>
    <published>2016-09-28T04:11:05.000Z</published>
    <updated>2016-09-29T13:59:28.255Z</updated>
    
    <content type="html"><![CDATA[<p>算法导论（Introduction to Algorithm）</p>
<h3 id="最短路径和旅行商问题"><a href="#最短路径和旅行商问题" class="headerlink" title="最短路径和旅行商问题"></a>最短路径和旅行商问题</h3><p>相似之处：都是寻求最短的路线<br>不同之处：最短路线问题是从若干条可选线路中选择一条线路使之在两个点之间达到交通路径最短，不需要经过所有的点；旅行商人问题中如果把仓库看做是图中的一个<br>点的话，首先要满足遍历所有的点，然后在所有满足的线路中选择最短的线路，其复杂程度要高于最短路径。</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入算法的设计使用的是增量（incremental）方法：在排好子数组A[1..j-1]后，将元素A[j]插入，形成排好序的子数组A[1..j]。伪代码如下，伪代码中<strong>数组是从1开始的</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSERTION-SORT(A)</div><div class="line">1 for j = 2 to length[A]</div><div class="line">2   key = A[j]</div><div class="line">3   //Insert A[j] into the sorted sequence A[1..j-1]</div><div class="line">4   i = j-1</div><div class="line">5   while i &gt; 0 and A[i] &gt; key</div><div class="line">6       A[i+1]=A[i]</div><div class="line">7       i = i − 1</div><div class="line">8   A[i+1]=key</div></pre></td></tr></table></figure>
<p>插入排序的java算法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> len = a.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;len;j++)&#123;</div><div class="line">            <span class="keyword">int</span> key = a[j];</div><div class="line">            <span class="keyword">int</span> i = j-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;a[i]&gt;key)&#123;</div><div class="line">                a[i+<span class="number">1</span>]=a[i];</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">            a[i+<span class="number">1</span>]=key;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InsertSort is = <span class="keyword">new</span> InsertSort();</div><div class="line">        <span class="keyword">int</span> num=<span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            a[i]= (<span class="keyword">int</span>) (Math.random()*num);<span class="comment">//Math.random()随机产生[0,1]的双精度浮点数</span></div><div class="line">        is.inserSort(a);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="循环不变式"><a href="#循环不变式" class="headerlink" title="循环不变式"></a>循环不变式</h3><p>循环不变式(Loop Invariant)是证明算法正确性的一个重要工具。对于循环不变式，必须证明它的三个性质：<br><br><strong>初始化(Initialization)</strong>：它在循环的第一轮迭代开始之前，应该是正确的。 <br><br><strong>保持(Maintenance)</strong>：如果在循环的某一次迭代开始之前它是正确的，那么，在下一次迭代开始之前，它也是正确的。<br><strong>终止(Termination)</strong>：当循环结束时，不变式给了我们一个有用的性质，它有助于表明算法是正确的。 <br></p>
<p>运用循环不变式对插入排序算法的正确性进行证明：<br><strong>初始化</strong>：j=2，子数组 A[1..j-1]只包含一个元素 A[1],显然它是已排序的。<br><strong>保持</strong>： 若A[1..j-1]是已排序的， 则按照大小确定了插入元素 A[j]位置之后的数组A[1..j]显然也是已排序的。<br><strong>终止</strong>：当 j=n+1 时，退出循环，此时已排序的数组是由 A[1],A[2],A[3]…A[n]组成的A[1..n]，此即原始数组 A。</p>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p><strong>分治法（divide-and-conquer）</strong>:有很多算法在结构上是递归的：为了解决一个给定的问题，算法要一次戒多次地递归调用其自身来解决相关的问题。这些算法通常采用分治策略：将原问题划分成 n 个规模较小而结构不原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。</p>
<p>分治模式在每一层递归上都有三个步骤：<br><strong>分解（Divide）</strong>：将原问题分解成一系列子问题；<br><strong>解决（Conquer）</strong>：递归地解各子问题。若子问题足够小，则直接求解；<br><strong>合并（Combine）</strong>：将子问题的结果合并成原问题的解。</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是基于分治法。<br><strong>分解</strong>：将 n 个元素分成各含 n/2 个元素的子序列；<br><strong>解决</strong>：用合并排序法对两个子序列递归地排序；<br><strong>合并</strong>：合并两个已排序的子序列以得到排序结果。<br>归并排序伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MERGE(A,p,q,r)</div><div class="line">1 n1 = q − p + 1</div><div class="line">2 n2 = r − q</div><div class="line">3 create arrays L[1..n1 + 1] and R[1..n2 + 1]</div><div class="line">4 for i = 1 to n1</div><div class="line">5   L[i]=A[p+i-1]</div><div class="line">6 for j=1 to n2</div><div class="line">7   R[j]=A[q+j]</div><div class="line">8 L[n1 + 1]= ∞</div><div class="line">9 R[n2 + 1]= ∞</div><div class="line">10 i = 1</div><div class="line">11 j = 1</div><div class="line">12 for k =p to r</div><div class="line">13  if L[i]≤R[j]</div><div class="line">14      A[k]=L[i]</div><div class="line">15      i = i + 1</div><div class="line">16  else A[k]=R[j]</div><div class="line">17      j = j + 1</div><div class="line">MERGE-SORT(A,p,r)</div><div class="line">1 if p&lt;r</div><div class="line">2   q= (p+r)/2</div><div class="line">3   MERGE-SORT(A,p,r)</div><div class="line">4   MERGE-SORT(A,q+1,r)</div><div class="line">5   MERGE-SORT(A,p,q,r)</div></pre></td></tr></table></figure>
<p>java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</div><div class="line">    <span class="comment">//归并算法</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> p,<span class="keyword">int</span> q,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> []m = <span class="keyword">new</span> <span class="keyword">int</span>[q-p+<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> []n = <span class="keyword">new</span> <span class="keyword">int</span>[r-q];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=p;j&lt;=q;i++,j++)</div><div class="line">            m[i]=a[j];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=q+<span class="number">1</span>;j&lt;=r;i++,j++)</div><div class="line">            n[i]=a[j];</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;m.length&amp;&amp;j&lt;n.length)&#123;</div><div class="line">            <span class="keyword">if</span>(m[i]&gt;n[j])a[p++]=n[j++];</div><div class="line">            <span class="keyword">else</span> a[p++]=m[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;m.length)a[p++]=m[i++];</div><div class="line">        <span class="keyword">while</span>(j&lt;n.length)a[p++]=n[j++];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//递归进行归并排序</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> p,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">            <span class="keyword">int</span> q=(p+r)/<span class="number">2</span>;</div><div class="line">            merge_sort(a,p,q);</div><div class="line">            merge_sort(a,q+<span class="number">1</span>,r);</div><div class="line">            merge(a,p,q,r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Merge merge = <span class="keyword">new</span> Merge();</div><div class="line">        <span class="keyword">int</span> num=<span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            a[i]= (<span class="keyword">int</span>) (Math.random()*num);<span class="comment">//Math.random()随机产生[0,1]的双精度浮点数</span></div><div class="line">        merge.merge_sort(a,<span class="number">0</span>,num-<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num;i++)</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法导论（Introduction to Algorithm）&lt;/p&gt;
&lt;h3 id=&quot;最短路径和旅行商问题&quot;&gt;&lt;a href=&quot;#最短路径和旅行商问题&quot; class=&quot;headerlink&quot; title=&quot;最短路径和旅行商问题&quot;&gt;&lt;/a&gt;最短路径和旅行商问题&lt;/h3&gt;&lt;p
    
    </summary>
    
      <category term="算法导论" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="sort" scheme="http://wenjiewang.top/tags/sort/"/>
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number</title>
    <link href="http://wenjiewang.top/2016/09/20/Leetcode-9/"/>
    <id>http://wenjiewang.top/2016/09/20/Leetcode-9/</id>
    <published>2016-09-19T16:12:12.000Z</published>
    <updated>2016-09-19T16:47:19.820Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第8题</p>
<h1 id="题目9-SPalindrome-Number"><a href="#题目9-SPalindrome-Number" class="headerlink" title="题目9 SPalindrome Number"></a>题目9 SPalindrome Number</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>求一个整数是否为回文数字。</p>
<ol>
<li>0~9肯定是回文数字，负数也不是（开始以为负数也要判断其是否为回文）。</li>
<li>将整数从最低位开始向最高位进行比较，不需要转换为字符串。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">10</span>&amp;&amp;x&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//0~9</span></div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//负数</span></div><div class="line">        <span class="keyword">int</span> y = x;</div><div class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;<span class="comment">//c来存储整数的位数</span></div><div class="line">        <span class="keyword">while</span>(y/<span class="number">10</span>!=<span class="number">0</span>)&#123;<span class="comment">//计算整数x有几位</span></div><div class="line">            y/=<span class="number">10</span>;</div><div class="line">            m*=<span class="number">10</span>;</div><div class="line">            c++;</div><div class="line">        &#125;</div><div class="line">        c++;</div><div class="line">        y=x;<span class="comment">//x,y，分别代表从高位和从低位开始</span></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">int</span> t = x/m;<span class="comment">//高位的值</span></div><div class="line">            <span class="keyword">int</span> p = y%<span class="number">10</span>;<span class="comment">//低位的值</span></div><div class="line">            <span class="keyword">if</span>(t!=p)<span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//若不相等则肯定不为回文</span></div><div class="line">            <span class="keyword">if</span>(c==<span class="number">0</span>||c==<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//若c=0或者c=1代表以及比较完毕，肯定为回文。</span></div><div class="line">            x=x%m;<span class="comment">//去掉高位值</span></div><div class="line">            m=m/<span class="number">10</span>;</div><div class="line">            y=y/<span class="number">10</span>;<span class="comment">//去掉低位</span></div><div class="line">            c=c-<span class="number">2</span>;<span class="comment">//位数减2</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<p>该方法参考的discuss上的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*1. 将整数x分为两部分，前半部分保存在x，后半部分逆序后保存在v中，</div><div class="line">*2. 其中x&gt;v，即若x的位数为奇数时，x则比v多一位。若x&gt;v，x=x/10</div><div class="line">*3. 然后再判断x是否和v相等</div><div class="line">*4. 这个方法效率z高</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> v;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="comment">//optimizations</span></div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">100</span>&amp;&amp;x%<span class="number">11</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">1000</span>&amp;&amp;((x/<span class="number">100</span>)*<span class="number">10</span>+x%<span class="number">10</span>)%<span class="number">11</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="comment">//actual logic</span></div><div class="line">        v=x%<span class="number">10</span>;</div><div class="line">        x=x/<span class="number">10</span>;</div><div class="line">        <span class="keyword">while</span>(x-v&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">                v=v*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">                x/=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(v&gt;x)&#123;v/=<span class="number">10</span>;&#125;</div><div class="line">        <span class="keyword">return</span> v==x?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第8题&lt;/p&gt;
&lt;h1 id=&quot;题目9-SPalindrome-Numbe
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-396-399</title>
    <link href="http://wenjiewang.top/2016/09/12/Leetcode-396-399/"/>
    <id>http://wenjiewang.top/2016/09/12/Leetcode-396-399/</id>
    <published>2016-09-12T14:53:21.000Z</published>
    <updated>2016-10-11T06:11:34.627Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/contest/detail/4" target="_blank" rel="external">Leetcoode  Weekly Contest 4</a>总共有四道题</p>
<h1 id="题目389-Find-the-Difference"><a href="#题目389-Find-the-Difference" class="headerlink" title="题目389 Find the Difference"></a>题目389 Find the Difference</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given an array of integers <code>A</code> and let <code>n</code> to be its length.</p>
<p>Assume Bk to be an array obtained by rotating the array <code>A</code> k positions clock-wise, we define a “rotation function” <code>F</code> on <code>A</code> as follow:</p>
<p><code>F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]</code>.</p>
<p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>.</p>
<p>Note:<br>n is guaranteed to be less than 105.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">A = [4, 3, 2, 6]</div><div class="line"></div><div class="line">F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</div><div class="line">F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16</div><div class="line">F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23</div><div class="line">F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</div><div class="line"></div><div class="line">So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.</div></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><strong>方法一</strong>  强行求每个F(n)的值，然后保留最大的，（超时）</li>
<li><strong>方法二</strong>  注意到如下规则：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sum(A)为数组A元素的和，len为数组长度</span></div><div class="line">F(<span class="number">0</span>)=<span class="number">0</span>*A[<span class="number">0</span>]+<span class="number">1</span>*A[<span class="number">1</span>]+...+(n-<span class="number">1</span>)*A[n-<span class="number">1</span>]</div><div class="line">F(<span class="number">1</span>)=F(<span class="number">0</span>)+Sum(A) - A[len -<span class="number">1</span>]*len</div><div class="line">...</div><div class="line">F(n-<span class="number">1</span>)=F(n-<span class="number">1</span>)+Sum(A) - A[len-n+<span class="number">1</span>]*len</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法超时，不能通过</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;<span class="comment">//初始化为最小值</span></div><div class="line">    <span class="keyword">int</span> len = A.length;</div><div class="line">    <span class="keyword">if</span>(len&lt;<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果为空返回0</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">            <span class="keyword">int</span> s = (len-i+j)%len;<span class="comment">//倒置函数</span></div><div class="line">            m = m + j * A[s];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(m&gt;max)max = m;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = A.length;</div><div class="line">        <span class="keyword">if</span>(len&lt;<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">           count  = count + i*A[i];<span class="comment">//计算F(0)</span></div><div class="line">           s += A[i];<span class="comment">//计算Sum(A)</span></div><div class="line">        &#125;</div><div class="line">        max = count;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;len;i++)&#123;</div><div class="line">            count = count + s - A[len-i]*len;<span class="comment">//计算F(i)</span></div><div class="line">            <span class="keyword">if</span>(count &gt; max)max = count;<span class="comment">//就行比较或者用max=Math.max(max,count);</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="题目397-Integer-Replacement"><a href="#题目397-Integer-Replacement" class="headerlink" title="题目397 Integer Replacement"></a>题目397 Integer Replacement</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given a positive integer n and you can do operations as follow:</p>
<ol>
<li>If n is even, replace n with n/2.</li>
<li>If n is odd, you can replace n with either n + 1 or n - 1.</li>
</ol>
<p>What is the minimum number of replacements needed for n to become 1?</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">8</div><div class="line"></div><div class="line">Output:</div><div class="line">3</div><div class="line"></div><div class="line">Explanation:</div><div class="line">8 -&gt; 4 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">7</div><div class="line"></div><div class="line">Output:</div><div class="line">4</div><div class="line"></div><div class="line">Explanation:</div><div class="line">7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</div><div class="line">or</div><div class="line">7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</div></pre></td></tr></table></figure>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目看起来比较简单，就是求一个<strong>正整数</strong>转换成1，<strong>最少</strong>需要多少次变化，变化的过程是指：</p>
<ol>
<li>整数n为偶数则n=n/2</li>
<li>整数n为奇数则n=(n+1)/2或者n=(n-1)/2</li>
</ol>
<ul>
<li><strong>方法一</strong>  用递归，不过要注意到java中int的范围是-2147483648到2147483647，若n=2147483647时只能做减法,而且还要和(n+1)/2进行比较;n=1时为递归中值条件，否则则取(n+1)/2和(n-1)/2所求得最小值</li>
<li><strong>方法二</strong>  也是用递归，但是用的是<strong>BFS(广度优先搜索算法)</strong>，用队列来保存每次转换的可能值，下次遍历队列，继续遍历队列，直至有一个值为1（表示递归结束，已经找到最小值）。</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">integerReplacement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="comment">//由于int不能超过2147483647，只能手动计算(2147483647 + 1)的变化值，然后进行比较取最小值</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2147483647</span>)</div><div class="line">        <span class="keyword">return</span> Math.min(<span class="number">1</span>+integerReplacement(<span class="number">2147483647</span>-<span class="number">1</span>),<span class="number">2</span>+integerReplacement((<span class="number">2147483646</span>/<span class="number">2</span>) + <span class="number">1</span>));</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+integerReplacement(n/<span class="number">2</span>);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> + Math.min(integerReplacement((n+<span class="number">1</span>)/<span class="number">2</span>),integerReplacement(n/<span class="number">2</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerReplacement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">       <span class="keyword">assert</span> n &gt; <span class="number">0</span>;</div><div class="line">       Queue&lt;Long&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//一定是long型的队列，不然要分类讨论</span></div><div class="line">       <span class="comment">//n进队</span></div><div class="line">       queue.offer((<span class="keyword">long</span>)n);</div><div class="line">       <span class="keyword">return</span> bfs(queue, <span class="number">0</span>);<span class="comment">//初始化的队列只有一个值，level初始值0，因为n可能为1.</span></div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">(Queue&lt;Long&gt; oldqueue, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">       Queue&lt;Long&gt; newqueue = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//新建一个队列用来保存</span></div><div class="line">       <span class="keyword">while</span> (!oldqueue.isEmpty()) &#123;</div><div class="line">           <span class="keyword">long</span> n = oldqueue.poll();<span class="comment">//出队</span></div><div class="line">           <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">               <span class="keyword">return</span> level;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//进队，到新的队列</span></div><div class="line">           <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">               newqueue.offer(n / <span class="number">2</span>);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               newqueue.offer(n + <span class="number">1</span>);</div><div class="line">               newqueue.offer(n - <span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> bfs(newqueue, level + <span class="number">1</span>);<span class="comment">//继续将新的队列递归</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/contest/detail/4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode  Weekly Contest 4&lt;/a&gt;总共有四道题&lt;/p&gt;
&lt;h1 id=&quot;题目389-Fi
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
      <category term="BFS" scheme="http://wenjiewang.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer (atoi)</title>
    <link href="http://wenjiewang.top/2016/09/11/Leetcode-8/"/>
    <id>http://wenjiewang.top/2016/09/11/Leetcode-8/</id>
    <published>2016-09-11T05:15:24.000Z</published>
    <updated>2016-09-15T10:09:09.254Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第8题</p>
<h1 id="题目8-String-to-Integer-atoi）"><a href="#题目8-String-to-Integer-atoi）" class="headerlink" title="题目8 String to Integer (atoi）"></a>题目8 String to Integer (atoi）</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Implement <code>atoi</code> to convert a string to an integer.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>把字符串转换成整型数。</p>
<ol>
<li>函数跳过前面的空格字符，然后从第一个字符开始只能为<code>+</code>，<code>-</code>或者<code>数字</code>,之后跟着一串数字。</li>
<li>首先去掉字符串开始的空格字符，然后判断第一个字符是否为<code>+</code>,<code>-</code>或者<code>数字</code>，若不是则返回0；</li>
<li>判断最后解析出来的数字是否溢出，上溢则返回<code>INT_MAX (2147483647)</code>,下溢则返回<code>INT_MIN (-2147483648)</code></li>
<li>一定要用<strong>double</strong>来保存整数，不能用long，因为测试用例中比long还大的数。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">//判断一个字符是否为数字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNum</span><span class="params">(<span class="keyword">char</span> s)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//我的方法有点乱。。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//用来保存+，-，若为-，flag=-1</span></div><div class="line">        <span class="keyword">int</span> size =<span class="number">0</span>;<span class="comment">//记录+-符号的个数</span></div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;str.length();++j)<span class="keyword">if</span>(str.charAt(j)!=<span class="string">' '</span>)<span class="keyword">break</span>;<span class="comment">//去除空格</span></div><div class="line">        <span class="keyword">if</span>(j&lt;str.length()&amp;&amp;str.charAt(j)!=<span class="string">'-'</span>&amp;&amp;str.charAt(j)!=<span class="string">'+'</span>&amp;&amp;!isNum(str.charAt(j)))<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不满足条件2直接返回0</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = j;i&lt;str.length();i++)&#123;</div><div class="line">            <span class="keyword">char</span> ch = str.charAt(i);</div><div class="line">            <span class="keyword">if</span>(ch==<span class="string">'-'</span>||ch==<span class="string">'+'</span>)&#123;</div><div class="line">                size++;</div><div class="line">                <span class="keyword">if</span>(size&gt;<span class="number">1</span>)&#123;<span class="comment">//符号的个数&gt;1，跳出循环</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//判断符号后若不为数字或者该符号在字符串最后则返回0                </span></div><div class="line">                <span class="keyword">if</span>(i&lt;str.length()-<span class="number">1</span>&amp;&amp;!isNum(str.charAt(i+<span class="number">1</span>))||i==str.length()-<span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                flag = ch==<span class="string">'-'</span>?-<span class="number">1</span>:<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(isNum(ch)) &#123;</div><div class="line">                    s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;<span class="comment">//整数解析完毕，跳出循环</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        s = flag*s;</div><div class="line">        <span class="keyword">if</span>(s&gt;Integer.MAX_VALUE)</div><div class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s&lt;Integer.MIN_VALUE)</div><div class="line">            <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<p>该方法参考的discuss上的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> POrN = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//用来去掉字符串开始时的空格</span></div><div class="line">        <span class="keyword">char</span>[] charArr = str.toCharArray();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:charArr)&#123;</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span>( c &gt;=<span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span> )&#123;</div><div class="line">                result *= <span class="number">10</span>;</div><div class="line">                result += ( c - <span class="string">'0'</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">'-'</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                POrN = -<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">'+'</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                POrN =  <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">' '</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                <span class="comment">//刚刚开始时count一定为1，若这时字符也恰好为空格，则count--，</span></div><div class="line">                <span class="comment">//下次判断又可以判断了</span></div><div class="line">                count --;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( result &gt; Integer.MAX_VALUE )&#123;</div><div class="line">            <span class="keyword">if</span>(POrN == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)(result * POrN);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第8题&lt;/p&gt;
&lt;h1 id=&quot;题目8-String-to-Integer
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Container With Most Water(Leetcode 11)</title>
    <link href="http://wenjiewang.top/2016/09/11/Leetcode-11/"/>
    <id>http://wenjiewang.top/2016/09/11/Leetcode-11/</id>
    <published>2016-09-11T05:15:24.000Z</published>
    <updated>2016-10-07T14:41:58.961Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第11题</p>
<h1 id="题目8-String-to-Integer-atoi）"><a href="#题目8-String-to-Integer-atoi）" class="headerlink" title="题目8 String to Integer (atoi）"></a>题目8 String to Integer (atoi）</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given n non-negative integers <code>a1, a2, ..., an</code>, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.<br><br>Note: You may not slant the container.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>给定n个非负整数，这n个整数分别为<code>a1, a2, ..., an</code>,每个整数都对应一个坐标如<code>ai</code>对应坐标为(i,ai)，该坐标和点(i,0)形成的线段，从n条线段中找出两条使得形成的容器装水最多，容器不能倾斜。</p>
<p><strong>方法一</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//超时。。。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = height.length;</div><div class="line">        <span class="keyword">int</span> max_water = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = j+<span class="number">1</span>;i&lt;len;i++)&#123;</div><div class="line">                <span class="comment">//取长度较小的边，类似木桶原理</span></div><div class="line">                <span class="keyword">int</span> h = height[i]&gt;height[j]?height[j]:height[i];</div><div class="line">                <span class="keyword">int</span> w = (i-j)*h;</div><div class="line">                <span class="keyword">if</span>(max_water&lt;w)&#123;</div><div class="line">                    max_water = w;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max_water;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<p>该方法参考的discuss上的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> POrN = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//用来去掉字符串开始时的空格</span></div><div class="line">        <span class="keyword">char</span>[] charArr = str.toCharArray();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:charArr)&#123;</div><div class="line">            count ++;</div><div class="line">            <span class="keyword">if</span>( c &gt;=<span class="string">'0'</span> &amp;&amp; c &lt;=<span class="string">'9'</span> )&#123;</div><div class="line">                result *= <span class="number">10</span>;</div><div class="line">                result += ( c - <span class="string">'0'</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">'-'</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                POrN = -<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">'+'</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                POrN =  <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">' '</span> &amp;&amp; count == <span class="number">1</span>)&#123;</div><div class="line">                <span class="comment">//刚刚开始时count一定为1，若这时字符也恰好为空格，则count--，</span></div><div class="line">                <span class="comment">//下次判断又可以判断了</span></div><div class="line">                count --;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( result &gt; Integer.MAX_VALUE )&#123;</div><div class="line">            <span class="keyword">if</span>(POrN == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)(result * POrN);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第11题&lt;/p&gt;
&lt;h1 id=&quot;题目8-String-to-Intege
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-5-7</title>
    <link href="http://wenjiewang.top/2016/09/11/Leetcode-5-7/"/>
    <id>http://wenjiewang.top/2016/09/11/Leetcode-5-7/</id>
    <published>2016-09-11T05:15:24.000Z</published>
    <updated>2016-09-11T07:53:32.771Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第5题与第7题</p>
<h1 id="题目5-Longest-Palindromic-Substring"><a href="#题目5-Longest-Palindromic-Substring" class="headerlink" title="题目5 Longest Palindromic Substring"></a>题目5 Longest Palindromic Substring</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>给定一个字符串求最长的回文子字符串。方法一和二参考discuss</p>
<ul>
<li><strong>方法一</strong> 用两个指针从可能回文的字符串地方向两边进行判断。如一个奇数长度字符串两个指针从中间开始分别进行比较，而偶数时则是至少中间两个字符串相同（也可能是四个八个等等）。</li>
<li><strong>方法二</strong> 基于动态规划，dp(i,j)代表字符串s(i to j)是回文字符串，则dp(i,j)=true，否则dp(i,j)=false。</li>
</ul>
<ol>
<li>那么一般情况下dp[i][j]=dp[i+1][j=1]&amp;&amp;s[i]==s[j]</li>
<li>或者当j-i&lt;3时，dp[i][j]=(j-i&lt;3)&amp;&amp;s[i]==s[j]<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li>
</ol>
<p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>|s.isEmpty())<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;<span class="comment">//保存最长的字符串数组下标</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">int</span> beg = i,end = i;</div><div class="line">            <span class="keyword">while</span>(end+<span class="number">1</span>&lt;s.length()&amp;&amp;s.charAt(beg)==s.charAt(end+<span class="number">1</span>))&#123;<span class="comment">//判断可能为回文字符串的中间</span></div><div class="line">                end++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(end+<span class="number">1</span>&lt;s.length()&amp;&amp;beg-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;s.charAt(end+<span class="number">1</span>)==s.charAt(beg-<span class="number">1</span>))&#123;<span class="comment">//向中间向两边两边开始遍历</span></div><div class="line">                beg--;</div><div class="line">                end++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(end - beg + <span class="number">1</span>&gt;max)&#123;<span class="comment">//判断该回文字符串是不是最大的字符串</span></div><div class="line">                a=beg;</div><div class="line">                b=end;</div><div class="line">                max = end - beg + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s.substring(a,b+<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> n = s.length();</div><div class="line">  String res = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</div><div class="line">    </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</div><div class="line">      dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; <span class="number">3</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);<span class="comment">//求得dp的值</span></div><div class="line">            </div><div class="line">      <span class="keyword">if</span> (dp[i][j] &amp;&amp; (res == <span class="keyword">null</span> || j - i + <span class="number">1</span> &gt; res.length())) &#123;<span class="comment">//dp值为true则该字符串为回文字符串</span></div><div class="line">        res = s.substring(i, j + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="题目7-Reverse-Integer"><a href="#题目7-Reverse-Integer" class="headerlink" title="题目7 Reverse Integer"></a>题目7 Reverse Integer</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="external">题目链接</a></p>
<p>Reverse digits of an integer.</p>
<p><strong>Example1:</strong> <code>x = 123, return 321</code></p>
<p><strong>Example2:</strong> <code>x = 123, return 321</code></p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>求一个正数(int)的反向数。要注意到<strong>反向之后可能会越界</strong>，java的int类型是32位(-2147483648到2147483648)，例如1010101019的反向数就会越界。其次是<strong>负数取余的值还是负数</strong>。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> y = x;</div><div class="line">    <span class="keyword">long</span> res = <span class="number">0</span>;<span class="comment">//这里用long来求反向数</span></div><div class="line">    <span class="keyword">while</span>(y!=<span class="number">0</span>)&#123;</div><div class="line">        res = res*<span class="number">10</span> + y%<span class="number">10</span>;<span class="comment">//负数对正数取余负号保留</span></div><div class="line">        y/=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE||res&lt;Integer.MIN_VALUE)&#123;<span class="comment">//判断是否越界，越界则反向数为0</span></div><div class="line">        res = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第5题与第7题&lt;/p&gt;
&lt;h1 id=&quot;题目5-Longest-Palin
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-392-394(共四道)</title>
    <link href="http://wenjiewang.top/2016/09/07/Leetcode-392-394/"/>
    <id>http://wenjiewang.top/2016/09/07/Leetcode-392-394/</id>
    <published>2016-09-06T17:17:21.000Z</published>
    <updated>2016-09-13T11:15:34.166Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第392题到第394题</p>
<h1 id="题目392-Is-Subsequence"><a href="#题目392-Is-Subsequence" class="headerlink" title="题目392 Is Subsequence"></a>题目392 Is Subsequence</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given a string s and a string t, check if s is subsequence of t.</p>
<p>You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (&lt;=100).</p>
<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, “ace” is a subsequence of <code>&quot;abcde&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>
<p><strong>Example1:</strong></p>
<p>s = <code>&quot;abc&quot;</code>, t = <code>&quot;ahbgdc&quot;</code></p>
<p>Return <code>true</code>.</p>
<p><strong>Example2</strong></p>
<p>s=<code>&quot;axc&quot;</code>,t=<code>&quot;ahbgdc&quot;</code></p>
<p>Return <code>false</code>.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目大意：给定两个字符串s，t，检查s是否是t的子串。其中s和t都只包含小写字符，t是非常大的字符串（长度大约有50万长），s是一个比较短的字符串长度小于等于100。子串是指该字符串由原来的字符串删除一些字符但不改变字符的相对位置。</p>
<ul>
<li><strong>方法一</strong> 两个for循环遍历一遍。（刚刚开始，我在想int是不是不能50万，后来想到java中int为32位，肯定可以达到50w；</li>
<li><strong>方法二</strong> 参考了discuss上的，只需要一个for循环。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ls=s.length();</div><div class="line">        <span class="keyword">int</span> lt=t.length();</div><div class="line">        <span class="keyword">if</span>(ls==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//空串肯定为t的子串</span></div><div class="line">        <span class="keyword">int</span> i,m=<span class="number">0</span>;<span class="comment">//m标识该从t中哪开始遍历</span></div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ls;i++)&#123;</div><div class="line">            <span class="keyword">char</span> a = s.charAt(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&lt;lt;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(a==t.charAt(j))&#123;</div><div class="line">                    m = j+<span class="number">1</span>;<span class="comment">//下次遍历从j+1开始</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                m = j + <span class="number">1</span>;<span class="comment">//记录当前遍历到哪了</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(m&gt;=lt&amp;&amp;i&lt;ls-<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span></div><div class="line">   &#123;</div><div class="line">       <span class="keyword">if</span>(t.length() &lt; s.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">int</span> prev = <span class="number">0</span>;<span class="comment">//相当于方法一中的m</span></div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();i++)</div><div class="line">       &#123;</div><div class="line">           <span class="keyword">char</span> tempChar = s.charAt(i);</div><div class="line">           prev = t.indexOf(tempChar,prev);<span class="comment">//在t中查找tempChar字符，运用indexOf方法，相当于方法一中第二个for循环</span></div><div class="line">           <span class="keyword">if</span>(prev == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           prev++;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="题目393-UTF-8-Validation"><a href="#题目393-UTF-8-Validation" class="headerlink" title="题目393 UTF-8 Validation"></a>题目393 UTF-8 Validation</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p><a href="https://leetcode.com/contest/2/problems/perfect-rectangle/" target="_blank" rel="external">题目链接</a></p>
<p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p>
<ol>
<li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>
<li>For n-bytes character, the first n-bits are all one’s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.<br>This is how the UTF-8 encoding would work:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Char. number range  |        UTF-8 octet sequence</div><div class="line">     (hexadecimal)    |              (binary)</div><div class="line">  --------------------+---------------------------------------------</div><div class="line">  0000 0000-0000 007F | 0xxxxxxx</div><div class="line">  0000 0080-0000 07FF | 110xxxxx 10xxxxxx</div><div class="line">  0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</div><div class="line">  0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</div></pre></td></tr></table></figure>
<p>Given an array of integers representing the data, return whether it is a valid utf-8 encoding.</p>
<p><strong>Note:</strong><br>The input is an array of integers. Only <strong>the least significant 8 bits</strong> of each integer is used to store the data. This means each integer represents only 1 byte of data.</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.</div><div class="line"></div><div class="line">Return true.</div><div class="line">It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.</div></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.</div><div class="line"></div><div class="line">Return false.</div><div class="line">The first 3 bits are all one&apos;s and the 4th bit is 0 means it is a 3-bytes character.</div><div class="line">The next byte is a continuation byte which starts with 10 and that&apos;s correct.</div><div class="line">But the second continuation byte does not start with 10, so it is invalid.</div></pre></td></tr></table></figure>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目大意：一个UTF-8编码的字符长度可能为1byte到4byte长，主要取决于以下规则：</p>
<ol>
<li>对于1byte字符，他的第一位是0，紧接着的是其的Unicode编码</li>
<li>对于n-bytes字符，前n-bits全是1，而n+1位为0，紧跟着的是n-1个字节其前两位为10开始的</li>
</ol>
<p>给定一个int数组，数组中每个整数都至少是8位来存储数据，这意味着一个整数仅仅代表一个字节的数据</p>
<ul>
<li><strong>方法一</strong> 首先获取第一个整数判断其前几位是1，然后再判断后面几个是否为10（二进制）开始的。参考discuss的</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mask = <span class="number">0x80</span>;<span class="comment">//mask 二进制为10000000</span></div><div class="line">    <span class="keyword">if</span>((s&amp;mask)==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//进行与操作，判断第一位是否为0</span></div><div class="line">    mask&gt;&gt;=<span class="number">1</span>;<span class="comment">//mask 现在为 1000000 ，进行右移操作</span></div><div class="line">    <span class="keyword">if</span>((s&amp;mask)==<span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//第二位为0的话肯定不是utf-8</span></div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    mask&gt;&gt;=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>((mask!=<span class="number">0</span>)&amp;&amp;(s&amp;mask)==mask)&#123;<span class="comment">//判断前几位1的个数</span></div><div class="line">        mask&gt;&gt;=<span class="number">1</span>;</div><div class="line">        len++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len==<span class="number">7</span>?-<span class="number">1</span>:len;<span class="comment">//排除11111111，</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validUtf8</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(data.length==<span class="number">0</span>&amp;&amp;data ==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span>  i =<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;data.length)&#123;</div><div class="line">        <span class="keyword">int</span> s = getLen(data[i]);</div><div class="line">        <span class="keyword">if</span>(s&lt;<span class="number">0</span>||(i+s)&gt;=data.length)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">while</span> (s&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(data[++i]&gt;&gt;<span class="number">6</span>!=<span class="number">2</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            s--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(s&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        i++;<span class="comment">//如果数组中还有数要继续判断其是否为utf-8</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="题目394-Decode-String"><a href="#题目394-Decode-String" class="headerlink" title="题目394 Decode String"></a>题目394 Decode String</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given an encoded string, return it’s decoded string.</p>
<p>The encoding rule is: <code>k[encoded_string]</code>, where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>
<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>
<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like <code>3a or 2[4]</code>.<br><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</div><div class="line">s = &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.//注意可以嵌套的，我当时做的时候没注意嵌套，然后做错了</div><div class="line">s = &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</div></pre></td></tr></table></figure>
<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目大意：将字符串解码，返回解码后的字符串。</p>
<ul>
<li><strong>方法一</strong> 用栈来存储待解码字符串，每当遇到<code>]</code>进行一次解码，然后重新将其压入栈中，直到遍历完整个编码字符串。</li>
<li><strong>方法二</strong> 用递归来解决。参考的discuss。</li>
</ul>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">       Stack&lt;Character&gt; str = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//栈用来存放字符</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</div><div class="line">            <span class="keyword">if</span>(c==<span class="string">']'</span>)&#123;<span class="comment">//当前c为]则要做出一次解码</span></div><div class="line">                String repeat = <span class="string">""</span>;</div><div class="line">                <span class="keyword">while</span>(str.peek()!=<span class="string">'['</span>)&#123;</div><div class="line">                    repeat=str.peek()+repeat;<span class="comment">//注意这里一定是str.peek()+repeat，不能写反,也不能用+=</span></div><div class="line">                    str.pop();</div><div class="line">                &#125;</div><div class="line">                str.pop();</div><div class="line">                String num = <span class="string">""</span>;<span class="comment">//重复的数量，由于重复的值可能是多位数</span></div><div class="line">                <span class="keyword">while</span>(!str.isEmpty())&#123;</div><div class="line">                    <span class="keyword">char</span> n = str.peek();</div><div class="line">                    <span class="keyword">if</span>(!Character.isDigit(n))<span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        num=n+num;<span class="comment">//注意这里一定是n+num，不能写反，也不能用+=</span></div><div class="line">                        str.pop();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> re;</div><div class="line">                <span class="keyword">if</span>(num==<span class="string">""</span>)re=<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    re = Integer.parseInt(num);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span>(re--&gt;<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> ch:repeat.toCharArray())</div><div class="line">                        str.push(ch);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                str.push(c);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        String aimS=<span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span>(!str.isEmpty())&#123;</div><div class="line">            aimS=str.pop()+aimS;<span class="comment">//注意这里一定是str.pop()+aimS，不能写反，也不能用+=</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> aimS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idx;</div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">decodeString3</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        idx = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> helper(s);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">helper</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;idx &lt; s.length();++idx)&#123;</div><div class="line">            <span class="keyword">char</span> ch = s.charAt(idx);</div><div class="line">            <span class="keyword">if</span>(ch == <span class="string">'['</span>)&#123;</div><div class="line">                idx++;</div><div class="line">                String str = helper(s);</div><div class="line">                <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</div><div class="line">                    ans.append(str);</div><div class="line">                    --k;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">']'</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</div><div class="line">                k = k * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">            &#125; <span class="keyword">else</span> ans.append(ch);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第392题到第394题&lt;/p&gt;
&lt;h1 id=&quot;题目392-Is-Subs
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-6-391</title>
    <link href="http://wenjiewang.top/2016/09/04/Leetcode-391-6/"/>
    <id>http://wenjiewang.top/2016/09/04/Leetcode-391-6/</id>
    <published>2016-09-03T16:12:01.000Z</published>
    <updated>2016-09-07T16:53:05.687Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Leetcoode</a>上的第6题与第391题</p>
<h1 id="题目6-ZigZag-Conversion"><a href="#题目6-ZigZag-Conversion" class="headerlink" title="题目6 ZigZag Conversion"></a>题目6 ZigZag Conversion</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:<br><code>string convert(string text, int nRows);</code><br>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>其实刚刚看到这个题目时，看了很久都不知道题目意思，然后去wiki了<a href="https://en.wikipedia.org/wiki/Zigzag" target="_blank" rel="external">Zigzag</a>的意思，指锯齿状，而且锯齿的角度是平行的且每隔一条线之间的两条行平行。简而言之就是多个<code>W</code>连接起来。<br>例如：<br><img src="img/leetcode6.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String s=<span class="string">"123456789"</span>;</div><div class="line">convert(s,<span class="number">3</span>);</div><div class="line"><span class="comment">//输出的字符串应该为159246837</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>方法一</strong> 用一个字符串数组来保存要输出每行的字符串，最后将字符串数组依次输出。</li>
<li><strong>方法二</strong> 寻找每行之间的规律，可以发现第一行和最后一行字符之间数组下标值相差（numRows-1）*2，而其他行除了下标相差（numRows-1)*2之外还有一个数，即该数是前一个数加上（numRows-1-i）*2，这里i为行数（从0开始）。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">略</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="keyword">if</span>(numRows&lt;=<span class="number">1</span>||len==<span class="number">0</span>)<span class="keyword">return</span> s;<span class="comment">//只有一行，或者字符串为空时直接返回s</span></div><div class="line">        String res = <span class="string">""</span>;<span class="comment">//要输出的字符串</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;len;j+=(numRows-<span class="number">1</span>)*<span class="number">2</span>)&#123;</div><div class="line">                res = res + s.charAt(j);</div><div class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i&lt;len-<span class="number">1</span>)&#123;<span class="comment">//除了第一行和最后一行</span></div><div class="line">                    <span class="keyword">int</span> k = j + (numRows - i - <span class="number">1</span>)*<span class="number">2</span>;<span class="comment">//之间的数的下标</span></div><div class="line">                    <span class="keyword">if</span>(k&lt;len)&#123;<span class="comment">//小于字符串长度</span></div><div class="line">                        res += s.charAt(k);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="题目391-Perfect-Rectangle"><a href="#题目391-Perfect-Rectangle" class="headerlink" title="题目391 Perfect Rectangle"></a>题目391 Perfect Rectangle</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p><a href="https://leetcode.com/contest/2/problems/perfect-rectangle/" target="_blank" rel="external">题目链接</a></p>
<p>Given N axis-aligned rectangles where N &gt; 0, determine if they all together form an exact cover of a rectangular region.</p>
<p>Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).</p>
<p><strong>Example1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rectangles = [</div><div class="line">  [1,1,3,3],</div><div class="line">  [3,1,4,2],</div><div class="line">  [3,2,4,4],</div><div class="line">  [1,3,2,4],</div><div class="line">  [2,3,3,4]</div><div class="line">]</div><div class="line"></div><div class="line">Return true. All 5 rectangles together form an exact cover of a rectangular region.</div></pre></td></tr></table></figure>
<p><strong>Example2:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rectangles = [</div><div class="line">  [1,1,2,3],</div><div class="line">  [1,3,2,4],</div><div class="line">  [3,1,4,2],</div><div class="line">  [3,2,4,4]</div><div class="line">]</div><div class="line"></div><div class="line">Return false. Because there is a gap between the two rectangular regions.</div></pre></td></tr></table></figure>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>n个轴对称矩形(其中n&gt;0)，判断是否能围成一个矩形,不能有重叠且恰好围成一个矩形区域。每个矩形用左下顶点和右上顶点来表示，如矩形[1,1,2,3]，表示该矩形左下顶点坐标为（1,1），右下顶点坐标为（2,3）。</p>
<ul>
<li><strong>方法一</strong>  顶点检查法，<a href="https://discuss.leetcode.com/topic/55923/o-n-solution-by-counting-corners-with-detailed-explaination/2" target="_blank" rel="external">参考地址</a></li>
<li><strong>方法二</strong>  扫描线法，<a href="https://discuss.leetcode.com/topic/55944/o-n-log-n-sweep-line-solution" target="_blank" rel="external">参考地址</a><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2></li>
</ul>
<p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lastRemaining2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span> [n];</div><div class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span> [n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line">        a[i]=i+<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = n;</div><div class="line">    <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> i =<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;k-<span class="number">1</span>)&#123;<span class="comment">//正向删除</span></div><div class="line">            b[j++]=a[i+<span class="number">1</span>];<span class="comment">//复制</span></div><div class="line">            i+=<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        k=k/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(k!=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(j=k-<span class="number">1</span>,i=<span class="number">0</span>;j&gt;=<span class="number">0</span>;j-=<span class="number">2</span>)&#123;<span class="comment">//逆向删除</span></div><div class="line">            b[j]=<span class="number">0</span>;<span class="comment">//直接将其改为0</span></div><div class="line">        &#125;&#125;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;k;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(b[i]!=<span class="number">0</span>)&#123;</div><div class="line">                a[j++]=b[i];<span class="comment">//复制</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        k=k/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个扫描事件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">int</span> time;</div><div class="line">	<span class="keyword">int</span>[] rect;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span>[] rect)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.time = time;</div><div class="line">		<span class="keyword">this</span>.rect = rect;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Event that)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.time != that.time) <span class="keyword">return</span> <span class="keyword">this</span>.time - that.time;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.rect[<span class="number">0</span>] - that.rect[<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRectangleCover</span><span class="params">(<span class="keyword">int</span>[][] rectangles)</span> </span>&#123;</div><div class="line">	PriorityQueue&lt;Event&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;Event&gt; ();</div><div class="line">        <span class="comment">// border of y-intervals</span></div><div class="line">	<span class="keyword">int</span>[] border= &#123;Integer.MAX_VALUE, Integer.MIN_VALUE&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span>[] rect : rectangles) &#123;</div><div class="line">		Event e1 = <span class="keyword">new</span> Event(rect[<span class="number">0</span>], rect);</div><div class="line">		Event e2 = <span class="keyword">new</span> Event(rect[<span class="number">2</span>], rect);</div><div class="line">		pq.add(e1);</div><div class="line">		pq.add(e2);</div><div class="line">		<span class="keyword">if</span> (rect[<span class="number">1</span>] &lt; border[<span class="number">0</span>]) border[<span class="number">0</span>] = rect[<span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span> (rect[<span class="number">3</span>] &gt; border[<span class="number">1</span>]) border[<span class="number">1</span>] = rect[<span class="number">3</span>];</div><div class="line">	&#125;</div><div class="line">	TreeSet&lt;<span class="keyword">int</span>[]&gt; set = <span class="keyword">new</span> TreeSet&lt;<span class="keyword">int</span>[]&gt; (<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt; () &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">                <span class="comment">// if two y-intervals intersects, return 0</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span> <span class="params">(<span class="keyword">int</span>[] rect1, <span class="keyword">int</span>[] rect2)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (rect1[<span class="number">3</span>] &lt;= rect2[<span class="number">1</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (rect2[<span class="number">3</span>] &lt;= rect1[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">int</span> yRange = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (!pq.isEmpty()) &#123;</div><div class="line">		<span class="keyword">int</span> time = pq.peek().time;</div><div class="line">		<span class="keyword">while</span> (!pq.isEmpty() &amp;&amp; pq.peek().time == time) &#123;</div><div class="line">			Event e = pq.poll();</div><div class="line">			<span class="keyword">int</span>[] rect = e.rect;</div><div class="line">			<span class="keyword">if</span> (time == rect[<span class="number">2</span>]) &#123;</div><div class="line">				set.remove(rect);</div><div class="line">				yRange -= rect[<span class="number">3</span>] - rect[<span class="number">1</span>];</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (!set.add(rect)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				yRange += rect[<span class="number">3</span>] - rect[<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">                <span class="comment">// check intervals' range</span></div><div class="line">		<span class="keyword">if</span> (!pq.isEmpty() &amp;&amp; yRange != border[<span class="number">1</span>] - border[<span class="number">0</span>]) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			<span class="comment">//if (set.isEmpty()) return false;</span></div><div class="line">			<span class="comment">//if (yRange != border[1] - border[0]) return false;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode&lt;/a&gt;上的第6题与第391题&lt;/p&gt;
&lt;h1 id=&quot;题目6-ZigZag-Conv
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-389-390</title>
    <link href="http://wenjiewang.top/2016/08/30/Leetcode-389-390/"/>
    <id>http://wenjiewang.top/2016/08/30/Leetcode-389-390/</id>
    <published>2016-08-30T01:10:01.000Z</published>
    <updated>2016-08-30T02:00:44.179Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/contest/detail/2" target="_blank" rel="external">Leetcoode  Weekly Contest 2</a>总共有三道题</p>
<h1 id="题目389-Find-the-Difference"><a href="#题目389-Find-the-Difference" class="headerlink" title="题目389 Find the Difference"></a>题目389 Find the Difference</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;abcd&quot;</div><div class="line">t = &quot;abcde&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">e</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&apos;e&apos; is the letter that was added.</div></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>给定两个字符串s,t只包括小写字母，t是字符串s的字符重排而且在随机的位置上还多了一个字母，要求找到该字母。</p>
<ul>
<li><strong>方法一</strong>  第一反应就是用两个for循环，外层为s字符串，内层在t中寻找，找到的话将其替换成字符A（原字符串全是小写字母，所以不存在大写字符。然后再遍历一遍t，如果不为A字符则该字符为所求字符。</li>
<li><strong>方法二</strong> hash表原理，统计两个字符串中每个字符个数，然后找出两个字符串哈希表的不同，返回那个不同的字符即可。</li>
<li><strong>方法三</strong> （<em>这是我在写这个文章的时候想出来的</em>）将两个字符串中所有字符转换为整数相加，最后将总数相减即为所求字符（在Leetcode上能通过，好开心），这应该是最简单的方法吧。 <h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li>
</ul>
<p>方法一</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">略</div></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] hash1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];<span class="comment">//哈希表</span></div><div class="line">        <span class="keyword">int</span>[] hash2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.length();i++)&#123;</div><div class="line">            hash1[s.charAt(i)]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;t.length();i++)&#123;</div><div class="line">            hash2[t.charAt(i)]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(hash1[i]!=hash2[i])&#123;</div><div class="line">                <span class="keyword">return</span> (<span class="keyword">char</span>) i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">'\0'</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>方法三</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> s1=<span class="number">0</span>,t1=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">            s1+=(<span class="keyword">int</span>)s.charAt(i);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)</div><div class="line">            t1+=(<span class="keyword">int</span>)t.charAt(i);</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>) (t1-s1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="题目390-Elimination-Game"><a href="#题目390-Elimination-Game" class="headerlink" title="题目390 Elimination Game"></a>题目390 Elimination Game</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>There is a list of sorted integers from 1 to n. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>
<p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p>
<p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>
<p>Find the last number that remains starting with a list of length n.</p>
<p><strong>Example</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">n = 9,</div><div class="line">1 2 3 4 5 6 7 8 9</div><div class="line">2 4 6 8</div><div class="line">2 6</div><div class="line">6</div><div class="line"></div><div class="line">Output:</div><div class="line">6</div></pre></td></tr></table></figure>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>题目大意是指给定一个已排序的整数从1到n，首先从左到右，移除第一个数，而后每隔一个数字移除一个，直到表的最后位置，重复之前的步骤，不过这回是从右往左开始，移除最右边的数，然后每隔一个数移除一个，直到最左边。<br>重复上述操作，直至表中只有一个元素。</p>
<ul>
<li><strong>方法一</strong>  用数组，两个数组，一个用来保存未被删除的。但是该方法容易内存超过限制，不能通过leetcode。</li>
<li><strong>方法二</strong> 根据题设要求的数字移除过程，可以发现每执行完一趟数字移除操作，列表中剩余相邻数字之间的差都会加倍。（参考别人的）</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>方法一</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lastRemaining2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span> [n];</div><div class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span> [n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line">        a[i]=i+<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = n;</div><div class="line">    <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> i =<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;k-<span class="number">1</span>)&#123;<span class="comment">//正向删除</span></div><div class="line">            b[j++]=a[i+<span class="number">1</span>];<span class="comment">//复制</span></div><div class="line">            i+=<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        k=k/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(k!=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(j=k-<span class="number">1</span>,i=<span class="number">0</span>;j&gt;=<span class="number">0</span>;j-=<span class="number">2</span>)&#123;<span class="comment">//逆向删除</span></div><div class="line">            b[j]=<span class="number">0</span>;<span class="comment">//直接将其改为0</span></div><div class="line">        &#125;&#125;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;k;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(b[i]!=<span class="number">0</span>)&#123;</div><div class="line">                a[j++]=b[i];<span class="comment">//复制</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        k=k/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二</p>
<p>参考了<a href="http://bookshadow.com/weblog/2016/08/28/leetcode-elimination-game/" target="_blank" rel="external">书影</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lastRemaining3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,p=<span class="number">1</span>,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n&gt;<span class="number">1</span>)&#123;</div><div class="line">        n/=<span class="number">2</span>;</div><div class="line">        cnt++;<span class="comment">//执行的cnt趟</span></div><div class="line">        p*=<span class="number">2</span>;<span class="comment">//数字间的间隔</span></div><div class="line">        <span class="keyword">if</span>(cnt%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">            a += p/<span class="number">2</span> + p*(n-<span class="number">1</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            a -= p/<span class="number">2</span> + p*(n-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/contest/detail/2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcoode  Weekly Contest 2&lt;/a&gt;总共有三道题&lt;/p&gt;
&lt;h1 id=&quot;题目389-Fi
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-4</title>
    <link href="http://wenjiewang.top/2016/08/28/leetcode-4/"/>
    <id>http://wenjiewang.top/2016/08/28/leetcode-4/</id>
    <published>2016-08-28T15:00:32.000Z</published>
    <updated>2016-08-30T02:04:22.427Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Leetcode</a>上算法题四，求两个已排序数组的中位数。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 3]</div><div class="line">nums2 = [2]</div><div class="line"></div><div class="line">The median is 2.0</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nums1 = [1, 2]</div><div class="line">nums2 = [3, 4]</div><div class="line"></div><div class="line">The median is (2 + 3)/2 = 2.5</div></pre></td></tr></table></figure></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li><strong>方法一</strong>  将两个数组合并为一个有序数组a，根据两个数组长度的总长度n分类讨论：<ul>
<li>偶数则取数组a下标为n/2-1和n/2的取均值为所求的中位数，<strong>注意：数组为整数，应该除以2.0，转换为浮点数。</strong></li>
<li>奇数则取数组a下标为(n+1)/2-1的值为所求的中位数。</li>
</ul>
</li>
<li><strong>方法二</strong> 分开求(未完成)</li>
</ul>
<h2 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h2><p>方法一的空间复杂度为O(m+n),时间复杂度就是遍历一遍A,B数组为O(m+n);<br><br>方法二</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays2</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = nums1.length + nums2.length;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>,k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i&lt;nums1.length&amp;&amp;j&lt;nums2.length)&#123;</div><div class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</div><div class="line">                a[k++]=nums1[i++];</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                a[k++]=nums2[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//下面的while 只会执行一个</span></div><div class="line">        <span class="keyword">while</span> (i&lt;nums1.length) a[k++]=nums1[i++];</div><div class="line">        <span class="keyword">while</span> (j&lt;nums2.length) a[k++]=nums2[j++];</div><div class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> (a[len/<span class="number">2</span>-<span class="number">1</span>]+a[len/<span class="number">2</span>])/<span class="number">2.0</span>;<span class="comment">//注意：数组为整数，应该除以2.0</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> a[(len+<span class="number">1</span>)/<span class="number">2</span>-<span class="number">1</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = nums1.length + nums2.length;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//flag 为1时表示数组1进行了++操作，为2表示数组2进行了++操作</span></div><div class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> m, n;</div><div class="line">            <span class="keyword">while</span> (i &lt; nums1.length &amp;&amp; i &lt; nums2.length) &#123;</div><div class="line">                <span class="keyword">if</span> (count == len / <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;<span class="comment">//数组1中有一个中位数其序号为i,另一个中位数序号可能为i+1,j,j+1中的一个</span></div><div class="line">                        <span class="keyword">if</span> (nums1[i] &lt;= nums2[j]) &#123;<span class="comment">//另一个中位数为j</span></div><div class="line">                            <span class="keyword">return</span> (nums1[i] + nums2[j]) / <span class="number">2.0</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i + <span class="number">1</span>] &gt; nums2[j + <span class="number">1</span>])</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (nums1[i] + nums2[j]) / <span class="number">2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leetcode&lt;/a&gt;上算法题四，求两个已排序数组的中位数。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="算法分析" scheme="http://wenjiewang.top/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="algorithm" scheme="http://wenjiewang.top/tags/algorithm/"/>
    
      <category term="Leetcode" scheme="http://wenjiewang.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>hadooptest</title>
    <link href="http://wenjiewang.top/2016/08/25/hadooptest/"/>
    <id>http://wenjiewang.top/2016/08/25/hadooptest/</id>
    <published>2016-08-24T16:58:55.000Z</published>
    <updated>2016-08-25T09:14:20.565Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="研究生涯" scheme="http://wenjiewang.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E6%B6%AF/"/>
    
    
      <category term="hadoop" scheme="http://wenjiewang.top/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>git learning day 2</title>
    <link href="http://wenjiewang.top/2016/08/24/gitlearn2/"/>
    <id>http://wenjiewang.top/2016/08/24/gitlearn2/</id>
    <published>2016-08-24T03:07:57.000Z</published>
    <updated>2016-08-25T09:14:20.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><h3 id="撤销操作-昨天没看懂的地方，没细心看。。。"><a href="#撤销操作-昨天没看懂的地方，没细心看。。。" class="headerlink" title="撤销操作(昨天没看懂的地方，没细心看。。。)"></a>撤销操作(昨天没看懂的地方，没细心看。。。)</h3><p>一次提交过程，漏了几个文件未提交，此时可以运行带有<code>--amend</code>选修的提交命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#某一次commit</span></div><div class="line">$ git commit -m <span class="string">'initial commit'</span></div><div class="line"><span class="comment">#补上之前未git add 的文件</span></div><div class="line">$ git add forgotten_file</div><div class="line"><span class="comment">#直接进行下面操作，则将这些文件提交到该次commit,不需要-m</span></div><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<p><em>最终只会有一个提交结果，第二次提交将代替第一次提交</em></p>
<h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><p>某一次执行<code>git add</code>时不小心多添加几个文件到暂存区去，如何取消这几个文件？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下面假设add了所有文件到暂存区</span></div><div class="line">$ git add *</div><div class="line"><span class="comment">#查看文件状态</span></div><div class="line">$ git status</div><div class="line"><span class="comment">#假设要取消README文件,使用git reset</span></div><div class="line">$ git reset HEAD README</div><div class="line"><span class="comment">#其中HEAD是当前分支引用的指针，它指向该分支上的最后一次提交，这表示HEAD</span></div><div class="line"><span class="comment">#将是下一次提交的父节点。即可以将其看作你的上一次提交的快照</span></div></pre></td></tr></table></figure>
<h4 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h4><p>想对一个已修改文件，将其还原成上次提交的样子，<code>git status</code>会提示你如何做,即使用<code>git checkout -- &lt;file&gt; ...</code>,</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim README</div><div class="line">$ git status</div><div class="line">$ git checkout -- README</div><div class="line">$ git status</div></pre></td></tr></table></figure>
<p><em>你需要知道</em><code>git checkout -- [file]</code><em>是一个危险的命令</em>，这很重要。 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。<br>如果你仍然想保留对那个文件做出的修改，但是现在仍然需要撤消，将会在 <em>Git 分支</em>部分 介绍保存进度与分支；这些通常是更好的做法。<br>在git中任何<em>已提交的</em>东西总是可以恢复的。然而，你任何未提交的东西丢失后很可能再也找不回来。</p>
<h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p><em>Git的分支很重要</em>,是Git区分其他版本控制系统的一个重要原因。</p>
<h3 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h3><p>在进行提交操作时，Git会保存一个提交对象（commit object）。该对象包括一个指向暂存内容快照的指针，作者的姓名、邮箱，和提交时所输入的信息，以及一个指向其父对象的指针。首次提交没有父对象，普通提交操作产生一个父对象，而<em>由多个分支合并产生的提交对象有多个父对象</em>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#假设一个工作目录有三个文件分别为L,B,J，进行暂存操作，该过程会对每个文件计算一个校验和，</span></div><div class="line"><span class="comment">#然后把当前版本的文件快照报错到Git仓库中（Git使用blob对象来保存），最终将校验和加入到暂存区域等待提交：</span></div><div class="line">$ git add L B J</div><div class="line">$ git commit -m <span class="string">'The initial commit of my project'</span></div><div class="line">[master (root-commit) 27b7e34] The initial commit of my project</div><div class="line"> 3 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 L</div><div class="line"> create mode 100644 B</div><div class="line"> create mode 100644 J</div></pre></td></tr></table></figure>
<ol>
<li>现在Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个树对象（记录着目录结构和 blob 对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。</li>
<li>然后做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</li>
<li>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 它会在每次的提交操作中自动向前移动。<br><em>Git 的 “master” 分支并不是一个特殊分支。</em> 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有 master 分支，是因为 git init 命令默认创建它，并且大多数人都懒得去改动它。</li>
</ol>
<h4 id="分支创建与查看"><a href="#分支创建与查看" class="headerlink" title="分支创建与查看"></a>分支创建与查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个名称为testing分支，新创建的分支会在当前的提交对象上创建一个指针</span></div><div class="line">$ git branch testing</div><div class="line"><span class="comment">#可以通过git log命令查看各个分支所指的对象</span></div><div class="line">$ git <span class="built_in">log</span> --online --decorate</div></pre></td></tr></table></figure>
<h4 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># git checkout &lt;branch&gt;来切换（ps. git checkout --&lt;file&gt; 用来撤销对文件的修改，不过一般不用，太危险了），加一个-b可以直接创建并切换到该分支</span></div><div class="line">$ git checkout testing</div><div class="line">Switched to branch <span class="string">'testing'</span></div><div class="line"><span class="comment">#这样HEAD就指向testing分支了</span></div><div class="line">$ vim B</div><div class="line">$ git commit <span class="_">-a</span> -m <span class="string">'made a change'</span></div><div class="line">$ git <span class="built_in">log</span> --online --decorate</div><div class="line">be33a7d (HEAD -&gt; testing) made a change</div><div class="line">27b7e34 (master) The initial commit of my project</div><div class="line"><span class="comment">#切换到master分支</span></div><div class="line">$ git checkout master</div><div class="line"><span class="comment">#该命令做了两件事，一是使HEAD指向master分支，二是将工作目录恢复成master分支所指向的快照内容，也就是说现在你修改的话，将相对于一个较旧的版本</span></div><div class="line"><span class="comment">#现在在master分支上改变B文件</span></div><div class="line">$ vim B</div><div class="line">$ git commit <span class="_">-a</span> -m <span class="string">'made a change'</span></div><div class="line"><span class="comment">#通过下面指令输出提交历史、各个分支的指向以及项目分支交叉情况</span></div><div class="line">$ git <span class="built_in">log</span> --oneline  --decorate --graph --all</div><div class="line">* 084ec94 (HEAD -&gt; master) made a other changes</div><div class="line">| * be33a7d (testing) made a change</div><div class="line">|/</div><div class="line">* 27b7e34 The initial commit of my project</div></pre></td></tr></table></figure>
<p>由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的*创建和销毁都异常高效。 创建一个新分支就像是往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？</p>
<h3 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h3><h4 id="普通合并"><a href="#普通合并" class="headerlink" title="普通合并"></a>普通合并</h4><h4 id="遇到冲突合并"><a href="#遇到冲突合并" class="headerlink" title="遇到冲突合并"></a>遇到冲突合并</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git merge testing</div><div class="line">Auto-merging B</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> READE</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">You have unmerged paths.</div><div class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</div><div class="line">  (use <span class="string">"git merge --abort"</span> to abort the merge)</div><div class="line"></div><div class="line">Unmerged paths:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</div><div class="line"></div><div class="line">        both modified:   READE</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div><div class="line"><span class="comment">#使用图形化工具来解决冲突，你可以运行git mergetool</span></div><div class="line">$ git mergetool</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git基础&quot;&gt;&lt;a href=&quot;#Git基础&quot; class=&quot;headerlink&quot; title=&quot;Git基础&quot;&gt;&lt;/a&gt;Git基础&lt;/h2&gt;&lt;h3 id=&quot;撤销操作-昨天没看懂的地方，没细心看。。。&quot;&gt;&lt;a href=&quot;#撤销操作-昨天没看懂的地方，没细心看。。
    
    </summary>
    
      <category term="学习笔记" scheme="http://wenjiewang.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://wenjiewang.top/tags/git/"/>
    
  </entry>
  
</feed>
